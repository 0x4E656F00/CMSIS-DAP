/*
 * Copyright (c) 2013, Freescale Semiconductor, Inc.
 * All rights reserved.
 *
 * THIS SOFTWARE IS PROVIDED BY FREESCALE "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 * SHALL FREESCALE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
 * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 * OF SUCH DAMAGE.
 */
/*
 * WARNING! DO NOT EDIT THIS FILE DIRECTLY!
 *
 * This file was generated automatically and any changes may be lost.
 */
#ifndef __HW_FMC_REGISTERS_H__
#define __HW_FMC_REGISTERS_H__

#include "regs.h"

/*
 * K70 FMC
 *
 * Flash Memory Controller
 *
 * Registers defined in this header file:
 * - HW_FMC_PFAPR - Flash Access Protection Register
 * - HW_FMC_PFB01CR - Flash Bank 0-1 Control Register
 * - HW_FMC_PFB23CR - Flash Bank 2-3 Control Register
 * - HW_FMC_TAGVDW0Sn - Cache Tag Storage
 * - HW_FMC_TAGVDW1Sn - Cache Tag Storage
 * - HW_FMC_TAGVDW2Sn - Cache Tag Storage
 * - HW_FMC_TAGVDW3Sn - Cache Tag Storage
 * - HW_FMC_DATAW0S0UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW0S0MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW0S0ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW0S0LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW0S1UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW0S1MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW0S1ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW0S1LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW0S2UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW0S2MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW0S2ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW0S2LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW0S3UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW0S3MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW0S3ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW0S3LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW1S0UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW1S0MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW1S0ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW1S0LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW1S1UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW1S1MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW1S1ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW1S1LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW1S2UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW1S2MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW1S2ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW1S2LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW1S3UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW1S3MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW1S3ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW1S3LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW2S0UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW2S0MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW2S0ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW2S0LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW2S1UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW2S1MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW2S1ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW2S1LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW2S2UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW2S2MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW2S2ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW2S2LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW2S3UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW2S3MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW2S3ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW2S3LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW3S0UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW3S0MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW3S0ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW3S0LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW3S1UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW3S1MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW3S1ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW3S1LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW3S2UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW3S2MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW3S2ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW3S2LM - Cache Data Storage (lowermost word)
 * - HW_FMC_DATAW3S3UM - Cache Data Storage (uppermost word)
 * - HW_FMC_DATAW3S3MU - Cache Data Storage (mid-upper word)
 * - HW_FMC_DATAW3S3ML - Cache Data Storage (mid-lower word)
 * - HW_FMC_DATAW3S3LM - Cache Data Storage (lowermost word)
 *
 * - hw_fmc_t - Struct containing all module registers.
 */

//! @name Module base addresses
//@{
#ifndef REGS_FMC_BASE
#define HW_FMC_INSTANCE_COUNT (1U) //!< Number of instances of the FMC module.
#define REGS_FMC_BASE (0x4001f000U) //!< Base address for FMC.
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_PFAPR - Flash Access Protection Register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_PFAPR - Flash Access Protection Register (RW)
 *
 * Reset value: 0x00f8003fU
 */
typedef union _hw_fmc_pfapr
{
    uint32_t U;
    struct _hw_fmc_pfapr_bitfields
    {
        uint32_t M0AP : 2; //!< [1:0] Master 0 Access Protection
        uint32_t M1AP : 2; //!< [3:2] Master 1 Access Protection
        uint32_t M2AP : 2; //!< [5:4] Master 2 Access Protection
        uint32_t M3AP : 2; //!< [7:6] Master 3 Access Protection
        uint32_t M4AP : 2; //!< [9:8] Master 4 Access Protection
        uint32_t M5AP : 2; //!< [11:10] Master 5 Access Protection
        uint32_t M6AP : 2; //!< [13:12] Master 6 Access Protection
        uint32_t M7AP : 2; //!< [15:14] Master 7 Access Protection
        uint32_t M0PFD : 1; //!< [16] Master 0 Prefetch Disable
        uint32_t M1PFD : 1; //!< [17] Master 1 Prefetch Disable
        uint32_t M2PFD : 1; //!< [18] Master 2 Prefetch Disable
        uint32_t M3PFD : 1; //!< [19] Master 3 Prefetch Disable
        uint32_t M4PFD : 1; //!< [20] Master 4 Prefetch Disable
        uint32_t M5PFD : 1; //!< [21] Master 5 Prefetch Disable
        uint32_t M6PFD : 1; //!< [22] Master 6 Prefetch Disable
        uint32_t M7PFD : 1; //!< [23] Master 7 Prefetch Disable
        uint32_t RESERVED0 : 8; //!< [31:24] 
    } B;
} hw_fmc_pfapr_t;
#endif

/*!
 * @name Constants and macros for entire FMC_PFAPR register
 */
//@{
#define HW_FMC_PFAPR_ADDR      (REGS_FMC_BASE + 0x0U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_PFAPR           (*(__IO hw_fmc_pfapr_t *) HW_FMC_PFAPR_ADDR)
#define HW_FMC_PFAPR_RD()      (HW_FMC_PFAPR.U)
#define HW_FMC_PFAPR_WR(v)     (HW_FMC_PFAPR.U = (v))
#define HW_FMC_PFAPR_SET(v)    (HW_FMC_PFAPR_WR(HW_FMC_PFAPR_RD() |  (v)))
#define HW_FMC_PFAPR_CLR(v)    (HW_FMC_PFAPR_WR(HW_FMC_PFAPR_RD() & ~(v)))
#define HW_FMC_PFAPR_TOG(v)    (HW_FMC_PFAPR_WR(HW_FMC_PFAPR_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_PFAPR bitfields
 */

/*! @name Register FMC_PFAPR, field M0AP[1:0] (RW)
 *
 * This field controls whether read and write access to the flash are allowed based on the logical
 * master number of the requesting crossbar switch master.
 *
 * Values:
 * - 00 - No access may be performed by this master
 * - 01 - Only read accesses may be performed by this master
 * - 10 - Only write accesses may be performed by this master
 * - 11 - Both read and write accesses may be performed by this master
 */
//@{
#define BP_FMC_PFAPR_M0AP      (0U)      //!< Bit position for FMC_PFAPR_M0AP.
#define BM_FMC_PFAPR_M0AP      (0x00000003U)  //!< Bit mask for FMC_PFAPR_M0AP.
#define BS_FMC_PFAPR_M0AP      (2U)  //!< Bitfield size in bits for FMC_PFAPR_M0AP.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M0AP field.
#define BR_FMC_PFAPR_M0AP()   (HW_FMC_PFAPR.B.M0AP)
#endif

//! @brief Format value for bitfield FMC_PFAPR_M0AP.
#define BF_FMC_PFAPR_M0AP(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M0AP), uint32_t) & BM_FMC_PFAPR_M0AP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M0AP field to a new value.
#define BW_FMC_PFAPR_M0AP(v)   (HW_FMC_PFAPR_WR((HW_FMC_PFAPR_RD() & ~BM_FMC_PFAPR_M0AP) | BF_FMC_PFAPR_M0AP(v)))
#endif
//@}

/*! @name Register FMC_PFAPR, field M1AP[3:2] (RW)
 *
 * This field controls whether read and write access to the flash are allowed based on the logical
 * master number of the requesting crossbar switch master.
 *
 * Values:
 * - 00 - No access may be performed by this master
 * - 01 - Only read accesses may be performed by this master
 * - 10 - Only write accesses may be performed by this master
 * - 11 - Both read and write accesses may be performed by this master
 */
//@{
#define BP_FMC_PFAPR_M1AP      (2U)      //!< Bit position for FMC_PFAPR_M1AP.
#define BM_FMC_PFAPR_M1AP      (0x0000000cU)  //!< Bit mask for FMC_PFAPR_M1AP.
#define BS_FMC_PFAPR_M1AP      (2U)  //!< Bitfield size in bits for FMC_PFAPR_M1AP.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M1AP field.
#define BR_FMC_PFAPR_M1AP()   (HW_FMC_PFAPR.B.M1AP)
#endif

//! @brief Format value for bitfield FMC_PFAPR_M1AP.
#define BF_FMC_PFAPR_M1AP(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M1AP), uint32_t) & BM_FMC_PFAPR_M1AP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M1AP field to a new value.
#define BW_FMC_PFAPR_M1AP(v)   (HW_FMC_PFAPR_WR((HW_FMC_PFAPR_RD() & ~BM_FMC_PFAPR_M1AP) | BF_FMC_PFAPR_M1AP(v)))
#endif
//@}

/*! @name Register FMC_PFAPR, field M2AP[5:4] (RW)
 *
 * This field controls whether read and write access to the flash are allowed based on the logical
 * master number of the requesting crossbar switch master.
 *
 * Values:
 * - 00 - No access may be performed by this master
 * - 01 - Only read accesses may be performed by this master
 * - 10 - Only write accesses may be performed by this master
 * - 11 - Both read and write accesses may be performed by this master
 */
//@{
#define BP_FMC_PFAPR_M2AP      (4U)      //!< Bit position for FMC_PFAPR_M2AP.
#define BM_FMC_PFAPR_M2AP      (0x00000030U)  //!< Bit mask for FMC_PFAPR_M2AP.
#define BS_FMC_PFAPR_M2AP      (2U)  //!< Bitfield size in bits for FMC_PFAPR_M2AP.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M2AP field.
#define BR_FMC_PFAPR_M2AP()   (HW_FMC_PFAPR.B.M2AP)
#endif

//! @brief Format value for bitfield FMC_PFAPR_M2AP.
#define BF_FMC_PFAPR_M2AP(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M2AP), uint32_t) & BM_FMC_PFAPR_M2AP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M2AP field to a new value.
#define BW_FMC_PFAPR_M2AP(v)   (HW_FMC_PFAPR_WR((HW_FMC_PFAPR_RD() & ~BM_FMC_PFAPR_M2AP) | BF_FMC_PFAPR_M2AP(v)))
#endif
//@}

/*! @name Register FMC_PFAPR, field M3AP[7:6] (RW)
 *
 * This field controls whether read and write access to the flash are allowed based on the logical
 * master number of the requesting crossbar switch master.
 *
 * Values:
 * - 00 - No access may be performed by this master
 * - 01 - Only read accesses may be performed by this master
 * - 10 - Only write accesses may be performed by this master
 * - 11 - Both read and write accesses may be performed by this master
 */
//@{
#define BP_FMC_PFAPR_M3AP      (6U)      //!< Bit position for FMC_PFAPR_M3AP.
#define BM_FMC_PFAPR_M3AP      (0x000000c0U)  //!< Bit mask for FMC_PFAPR_M3AP.
#define BS_FMC_PFAPR_M3AP      (2U)  //!< Bitfield size in bits for FMC_PFAPR_M3AP.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M3AP field.
#define BR_FMC_PFAPR_M3AP()   (HW_FMC_PFAPR.B.M3AP)
#endif

//! @brief Format value for bitfield FMC_PFAPR_M3AP.
#define BF_FMC_PFAPR_M3AP(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M3AP), uint32_t) & BM_FMC_PFAPR_M3AP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M3AP field to a new value.
#define BW_FMC_PFAPR_M3AP(v)   (HW_FMC_PFAPR_WR((HW_FMC_PFAPR_RD() & ~BM_FMC_PFAPR_M3AP) | BF_FMC_PFAPR_M3AP(v)))
#endif
//@}

/*! @name Register FMC_PFAPR, field M4AP[9:8] (RW)
 *
 * This field controls whether read and write access to the flash are allowed based on the logical
 * master number of the requesting crossbar switch master.
 *
 * Values:
 * - 00 - No access may be performed by this master
 * - 01 - Only read accesses may be performed by this master
 * - 10 - Only write accesses may be performed by this master
 * - 11 - Both read and write accesses may be performed by this master
 */
//@{
#define BP_FMC_PFAPR_M4AP      (8U)      //!< Bit position for FMC_PFAPR_M4AP.
#define BM_FMC_PFAPR_M4AP      (0x00000300U)  //!< Bit mask for FMC_PFAPR_M4AP.
#define BS_FMC_PFAPR_M4AP      (2U)  //!< Bitfield size in bits for FMC_PFAPR_M4AP.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M4AP field.
#define BR_FMC_PFAPR_M4AP()   (HW_FMC_PFAPR.B.M4AP)
#endif

//! @brief Format value for bitfield FMC_PFAPR_M4AP.
#define BF_FMC_PFAPR_M4AP(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M4AP), uint32_t) & BM_FMC_PFAPR_M4AP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M4AP field to a new value.
#define BW_FMC_PFAPR_M4AP(v)   (HW_FMC_PFAPR_WR((HW_FMC_PFAPR_RD() & ~BM_FMC_PFAPR_M4AP) | BF_FMC_PFAPR_M4AP(v)))
#endif
//@}

/*! @name Register FMC_PFAPR, field M5AP[11:10] (RW)
 *
 * This field controls whether read and write access to the flash are allowed based on the logical
 * master number of the requesting crossbar switch master.
 *
 * Values:
 * - 00 - No access may be performed by this master
 * - 01 - Only read accesses may be performed by this master
 * - 10 - Only write accesses may be performed by this master
 * - 11 - Both read and write accesses may be performed by this master
 */
//@{
#define BP_FMC_PFAPR_M5AP      (10U)      //!< Bit position for FMC_PFAPR_M5AP.
#define BM_FMC_PFAPR_M5AP      (0x00000c00U)  //!< Bit mask for FMC_PFAPR_M5AP.
#define BS_FMC_PFAPR_M5AP      (2U)  //!< Bitfield size in bits for FMC_PFAPR_M5AP.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M5AP field.
#define BR_FMC_PFAPR_M5AP()   (HW_FMC_PFAPR.B.M5AP)
#endif

//! @brief Format value for bitfield FMC_PFAPR_M5AP.
#define BF_FMC_PFAPR_M5AP(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M5AP), uint32_t) & BM_FMC_PFAPR_M5AP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M5AP field to a new value.
#define BW_FMC_PFAPR_M5AP(v)   (HW_FMC_PFAPR_WR((HW_FMC_PFAPR_RD() & ~BM_FMC_PFAPR_M5AP) | BF_FMC_PFAPR_M5AP(v)))
#endif
//@}

/*! @name Register FMC_PFAPR, field M6AP[13:12] (RW)
 *
 * This field controls whether read and write access to the flash are allowed based on the logical
 * master number of the requesting crossbar switch master.
 *
 * Values:
 * - 00 - No access may be performed by this master
 * - 01 - Only read accesses may be performed by this master
 * - 10 - Only write accesses may be performed by this master
 * - 11 - Both read and write accesses may be performed by this master
 */
//@{
#define BP_FMC_PFAPR_M6AP      (12U)      //!< Bit position for FMC_PFAPR_M6AP.
#define BM_FMC_PFAPR_M6AP      (0x00003000U)  //!< Bit mask for FMC_PFAPR_M6AP.
#define BS_FMC_PFAPR_M6AP      (2U)  //!< Bitfield size in bits for FMC_PFAPR_M6AP.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M6AP field.
#define BR_FMC_PFAPR_M6AP()   (HW_FMC_PFAPR.B.M6AP)
#endif

//! @brief Format value for bitfield FMC_PFAPR_M6AP.
#define BF_FMC_PFAPR_M6AP(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M6AP), uint32_t) & BM_FMC_PFAPR_M6AP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M6AP field to a new value.
#define BW_FMC_PFAPR_M6AP(v)   (HW_FMC_PFAPR_WR((HW_FMC_PFAPR_RD() & ~BM_FMC_PFAPR_M6AP) | BF_FMC_PFAPR_M6AP(v)))
#endif
//@}

/*! @name Register FMC_PFAPR, field M7AP[15:14] (RW)
 *
 * This field controls whether read and write access to the flash are allowed based on the logical
 * master number of the requesting crossbar switch master.
 *
 * Values:
 * - 00 - No access may be performed by this master.
 * - 01 - Only read accesses may be performed by this master.
 * - 10 - Only write accesses may be performed by this master.
 * - 11 - Both read and write accesses may be performed by this master.
 */
//@{
#define BP_FMC_PFAPR_M7AP      (14U)      //!< Bit position for FMC_PFAPR_M7AP.
#define BM_FMC_PFAPR_M7AP      (0x0000c000U)  //!< Bit mask for FMC_PFAPR_M7AP.
#define BS_FMC_PFAPR_M7AP      (2U)  //!< Bitfield size in bits for FMC_PFAPR_M7AP.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M7AP field.
#define BR_FMC_PFAPR_M7AP()   (HW_FMC_PFAPR.B.M7AP)
#endif

//! @brief Format value for bitfield FMC_PFAPR_M7AP.
#define BF_FMC_PFAPR_M7AP(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M7AP), uint32_t) & BM_FMC_PFAPR_M7AP)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M7AP field to a new value.
#define BW_FMC_PFAPR_M7AP(v)   (HW_FMC_PFAPR_WR((HW_FMC_PFAPR_RD() & ~BM_FMC_PFAPR_M7AP) | BF_FMC_PFAPR_M7AP(v)))
#endif
//@}

/*! @name Register FMC_PFAPR, field M0PFD[16] (RW)
 *
 * These bits control whether prefetching is enabled based on the logical number of the requesting
 * crossbar switch master. This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0 - Prefetching for this master is enabled.
 * - 1 - Prefetching for this master is disabled.
 */
//@{
#define BP_FMC_PFAPR_M0PFD      (16U)      //!< Bit position for FMC_PFAPR_M0PFD.
#define BM_FMC_PFAPR_M0PFD      (0x00010000U)  //!< Bit mask for FMC_PFAPR_M0PFD.
#define BS_FMC_PFAPR_M0PFD      (1U)  //!< Bitfield size in bits for FMC_PFAPR_M0PFD.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M0PFD field.
#define BR_FMC_PFAPR_M0PFD()   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M0PFD))
#endif

//! @brief Format value for bitfield FMC_PFAPR_M0PFD.
#define BF_FMC_PFAPR_M0PFD(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M0PFD), uint32_t) & BM_FMC_PFAPR_M0PFD)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M0PFD field to a new value.
#define BW_FMC_PFAPR_M0PFD(v)   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M0PFD) = (v))
#endif
//@}

/*! @name Register FMC_PFAPR, field M1PFD[17] (RW)
 *
 * These bits control whether prefetching is enabled based on the logical number of the requesting
 * crossbar switch master. This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0 - Prefetching for this master is enabled.
 * - 1 - Prefetching for this master is disabled.
 */
//@{
#define BP_FMC_PFAPR_M1PFD      (17U)      //!< Bit position for FMC_PFAPR_M1PFD.
#define BM_FMC_PFAPR_M1PFD      (0x00020000U)  //!< Bit mask for FMC_PFAPR_M1PFD.
#define BS_FMC_PFAPR_M1PFD      (1U)  //!< Bitfield size in bits for FMC_PFAPR_M1PFD.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M1PFD field.
#define BR_FMC_PFAPR_M1PFD()   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M1PFD))
#endif

//! @brief Format value for bitfield FMC_PFAPR_M1PFD.
#define BF_FMC_PFAPR_M1PFD(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M1PFD), uint32_t) & BM_FMC_PFAPR_M1PFD)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M1PFD field to a new value.
#define BW_FMC_PFAPR_M1PFD(v)   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M1PFD) = (v))
#endif
//@}

/*! @name Register FMC_PFAPR, field M2PFD[18] (RW)
 *
 * These bits control whether prefetching is enabled based on the logical number of the requesting
 * crossbar switch master. This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0 - Prefetching for this master is enabled.
 * - 1 - Prefetching for this master is disabled.
 */
//@{
#define BP_FMC_PFAPR_M2PFD      (18U)      //!< Bit position for FMC_PFAPR_M2PFD.
#define BM_FMC_PFAPR_M2PFD      (0x00040000U)  //!< Bit mask for FMC_PFAPR_M2PFD.
#define BS_FMC_PFAPR_M2PFD      (1U)  //!< Bitfield size in bits for FMC_PFAPR_M2PFD.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M2PFD field.
#define BR_FMC_PFAPR_M2PFD()   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M2PFD))
#endif

//! @brief Format value for bitfield FMC_PFAPR_M2PFD.
#define BF_FMC_PFAPR_M2PFD(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M2PFD), uint32_t) & BM_FMC_PFAPR_M2PFD)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M2PFD field to a new value.
#define BW_FMC_PFAPR_M2PFD(v)   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M2PFD) = (v))
#endif
//@}

/*! @name Register FMC_PFAPR, field M3PFD[19] (RW)
 *
 * These bits control whether prefetching is enabled based on the logical number of the requesting
 * crossbar switch master. This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0 - Prefetching for this master is enabled.
 * - 1 - Prefetching for this master is disabled.
 */
//@{
#define BP_FMC_PFAPR_M3PFD      (19U)      //!< Bit position for FMC_PFAPR_M3PFD.
#define BM_FMC_PFAPR_M3PFD      (0x00080000U)  //!< Bit mask for FMC_PFAPR_M3PFD.
#define BS_FMC_PFAPR_M3PFD      (1U)  //!< Bitfield size in bits for FMC_PFAPR_M3PFD.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M3PFD field.
#define BR_FMC_PFAPR_M3PFD()   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M3PFD))
#endif

//! @brief Format value for bitfield FMC_PFAPR_M3PFD.
#define BF_FMC_PFAPR_M3PFD(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M3PFD), uint32_t) & BM_FMC_PFAPR_M3PFD)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M3PFD field to a new value.
#define BW_FMC_PFAPR_M3PFD(v)   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M3PFD) = (v))
#endif
//@}

/*! @name Register FMC_PFAPR, field M4PFD[20] (RW)
 *
 * These bits control whether prefetching is enabled based on the logical number of the requesting
 * crossbar switch master. This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0 - Prefetching for this master is enabled.
 * - 1 - Prefetching for this master is disabled.
 */
//@{
#define BP_FMC_PFAPR_M4PFD      (20U)      //!< Bit position for FMC_PFAPR_M4PFD.
#define BM_FMC_PFAPR_M4PFD      (0x00100000U)  //!< Bit mask for FMC_PFAPR_M4PFD.
#define BS_FMC_PFAPR_M4PFD      (1U)  //!< Bitfield size in bits for FMC_PFAPR_M4PFD.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M4PFD field.
#define BR_FMC_PFAPR_M4PFD()   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M4PFD))
#endif

//! @brief Format value for bitfield FMC_PFAPR_M4PFD.
#define BF_FMC_PFAPR_M4PFD(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M4PFD), uint32_t) & BM_FMC_PFAPR_M4PFD)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M4PFD field to a new value.
#define BW_FMC_PFAPR_M4PFD(v)   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M4PFD) = (v))
#endif
//@}

/*! @name Register FMC_PFAPR, field M5PFD[21] (RW)
 *
 * These bits control whether prefetching is enabled based on the logical number of the requesting
 * crossbar switch master. This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0 - Prefetching for this master is enabled.
 * - 1 - Prefetching for this master is disabled.
 */
//@{
#define BP_FMC_PFAPR_M5PFD      (21U)      //!< Bit position for FMC_PFAPR_M5PFD.
#define BM_FMC_PFAPR_M5PFD      (0x00200000U)  //!< Bit mask for FMC_PFAPR_M5PFD.
#define BS_FMC_PFAPR_M5PFD      (1U)  //!< Bitfield size in bits for FMC_PFAPR_M5PFD.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M5PFD field.
#define BR_FMC_PFAPR_M5PFD()   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M5PFD))
#endif

//! @brief Format value for bitfield FMC_PFAPR_M5PFD.
#define BF_FMC_PFAPR_M5PFD(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M5PFD), uint32_t) & BM_FMC_PFAPR_M5PFD)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M5PFD field to a new value.
#define BW_FMC_PFAPR_M5PFD(v)   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M5PFD) = (v))
#endif
//@}

/*! @name Register FMC_PFAPR, field M6PFD[22] (RW)
 *
 * These bits control whether prefetching is enabled based on the logical number of the requesting
 * crossbar switch master. This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0 - Prefetching for this master is enabled.
 * - 1 - Prefetching for this master is disabled.
 */
//@{
#define BP_FMC_PFAPR_M6PFD      (22U)      //!< Bit position for FMC_PFAPR_M6PFD.
#define BM_FMC_PFAPR_M6PFD      (0x00400000U)  //!< Bit mask for FMC_PFAPR_M6PFD.
#define BS_FMC_PFAPR_M6PFD      (1U)  //!< Bitfield size in bits for FMC_PFAPR_M6PFD.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M6PFD field.
#define BR_FMC_PFAPR_M6PFD()   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M6PFD))
#endif

//! @brief Format value for bitfield FMC_PFAPR_M6PFD.
#define BF_FMC_PFAPR_M6PFD(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M6PFD), uint32_t) & BM_FMC_PFAPR_M6PFD)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M6PFD field to a new value.
#define BW_FMC_PFAPR_M6PFD(v)   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M6PFD) = (v))
#endif
//@}

/*! @name Register FMC_PFAPR, field M7PFD[23] (RW)
 *
 * These bits control whether prefetching is enabled based on the logical number of the requesting
 * crossbar switch master. This field is further qualified by the PFBnCR[BxDPE,BxIPE] bits.
 *
 * Values:
 * - 0 - Prefetching for this master is enabled.
 * - 1 - Prefetching for this master is disabled.
 */
//@{
#define BP_FMC_PFAPR_M7PFD      (23U)      //!< Bit position for FMC_PFAPR_M7PFD.
#define BM_FMC_PFAPR_M7PFD      (0x00800000U)  //!< Bit mask for FMC_PFAPR_M7PFD.
#define BS_FMC_PFAPR_M7PFD      (1U)  //!< Bitfield size in bits for FMC_PFAPR_M7PFD.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFAPR_M7PFD field.
#define BR_FMC_PFAPR_M7PFD()   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M7PFD))
#endif

//! @brief Format value for bitfield FMC_PFAPR_M7PFD.
#define BF_FMC_PFAPR_M7PFD(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFAPR_M7PFD), uint32_t) & BM_FMC_PFAPR_M7PFD)

#ifndef __LANGUAGE_ASM__
//! @brief Set the M7PFD field to a new value.
#define BW_FMC_PFAPR_M7PFD(v)   (BITBAND_ACCESS32(HW_FMC_PFAPR_ADDR, BP_FMC_PFAPR_M7PFD) = (v))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_PFB01CR - Flash Bank 0-1 Control Register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_PFB01CR - Flash Bank 0-1 Control Register (RW)
 *
 * Reset value: 0x3004001fU
 *
 * This register controls the operation of memory banks 0 and 1.
 */
typedef union _hw_fmc_pfb01cr
{
    uint32_t U;
    struct _hw_fmc_pfb01cr_bitfields
    {
        uint32_t B01SEBE : 1; //!< [0] Bank 0-1 Single Entry Buffer Enable
        uint32_t B01IPE : 1; //!< [1] Bank 0-1 Instruction Prefetch Enable
        uint32_t B01DPE : 1; //!< [2] Bank 0-1 Data Prefetch Enable
        uint32_t B01ICE : 1; //!< [3] Bank 0-1 Instruction Cache Enable
        uint32_t B01DCE : 1; //!< [4] Bank 0-1 Data Cache Enable
        uint32_t CRC : 3; //!< [7:5] Cache Replacement Control
        uint32_t RESERVED0 : 9; //!< [16:8] Reserved.
        uint32_t B01MW : 2; //!< [18:17] Bank 0-1 Memory Width
        uint32_t S_B_INV : 1; //!< [19] Invalidate Prefetch Speculation Buffer
        uint32_t CINV_WAY : 4; //!< [23:20] Cache Invalidate Way x
        uint32_t CLCK_WAY : 4; //!< [27:24] Cache Lock Way x
        uint32_t B01RWSC : 4; //!< [31:28] Bank 0-1 Read Wait State Control
    } B;
} hw_fmc_pfb01cr_t;
#endif

/*!
 * @name Constants and macros for entire FMC_PFB01CR register
 */
//@{
#define HW_FMC_PFB01CR_ADDR      (REGS_FMC_BASE + 0x4U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_PFB01CR           (*(__IO hw_fmc_pfb01cr_t *) HW_FMC_PFB01CR_ADDR)
#define HW_FMC_PFB01CR_RD()      (HW_FMC_PFB01CR.U)
#define HW_FMC_PFB01CR_WR(v)     (HW_FMC_PFB01CR.U = (v))
#define HW_FMC_PFB01CR_SET(v)    (HW_FMC_PFB01CR_WR(HW_FMC_PFB01CR_RD() |  (v)))
#define HW_FMC_PFB01CR_CLR(v)    (HW_FMC_PFB01CR_WR(HW_FMC_PFB01CR_RD() & ~(v)))
#define HW_FMC_PFB01CR_TOG(v)    (HW_FMC_PFB01CR_WR(HW_FMC_PFB01CR_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_PFB01CR bitfields
 */

/*! @name Register FMC_PFB01CR, field B01SEBE[0] (RW)
 *
 * This bit controls whether the single entry page buffer is enabled in response to flash read
 * accesses. Its operation is independent from the cache of banks 2-3. A high-to-low transition of
 * this enable forces the page buffer to be invalidated.
 *
 * Values:
 * - 0 - Single entry buffer is disabled.
 * - 1 - Single entry buffer is enabled.
 */
//@{
#define BP_FMC_PFB01CR_B01SEBE      (0U)      //!< Bit position for FMC_PFB01CR_B01SEBE.
#define BM_FMC_PFB01CR_B01SEBE      (0x00000001U)  //!< Bit mask for FMC_PFB01CR_B01SEBE.
#define BS_FMC_PFB01CR_B01SEBE      (1U)  //!< Bitfield size in bits for FMC_PFB01CR_B01SEBE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_B01SEBE field.
#define BR_FMC_PFB01CR_B01SEBE()   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01SEBE))
#endif

//! @brief Format value for bitfield FMC_PFB01CR_B01SEBE.
#define BF_FMC_PFB01CR_B01SEBE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_B01SEBE), uint32_t) & BM_FMC_PFB01CR_B01SEBE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B01SEBE field to a new value.
#define BW_FMC_PFB01CR_B01SEBE(v)   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01SEBE) = (v))
#endif
//@}

/*! @name Register FMC_PFB01CR, field B01IPE[1] (RW)
 *
 * This bit controls whether prefetches (or speculative accesses) are initiated in response to
 * instruction fetches.
 *
 * Values:
 * - 0 - Do not prefetch in response to instruction fetches.
 * - 1 - Enable prefetches in response to instruction fetches.
 */
//@{
#define BP_FMC_PFB01CR_B01IPE      (1U)      //!< Bit position for FMC_PFB01CR_B01IPE.
#define BM_FMC_PFB01CR_B01IPE      (0x00000002U)  //!< Bit mask for FMC_PFB01CR_B01IPE.
#define BS_FMC_PFB01CR_B01IPE      (1U)  //!< Bitfield size in bits for FMC_PFB01CR_B01IPE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_B01IPE field.
#define BR_FMC_PFB01CR_B01IPE()   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01IPE))
#endif

//! @brief Format value for bitfield FMC_PFB01CR_B01IPE.
#define BF_FMC_PFB01CR_B01IPE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_B01IPE), uint32_t) & BM_FMC_PFB01CR_B01IPE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B01IPE field to a new value.
#define BW_FMC_PFB01CR_B01IPE(v)   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01IPE) = (v))
#endif
//@}

/*! @name Register FMC_PFB01CR, field B01DPE[2] (RW)
 *
 * This bit controls whether prefetches (or speculative accesses) are initiated in response to data
 * references.
 *
 * Values:
 * - 0 - Do not prefetch in response to data references.
 * - 1 - Enable prefetches in response to data references.
 */
//@{
#define BP_FMC_PFB01CR_B01DPE      (2U)      //!< Bit position for FMC_PFB01CR_B01DPE.
#define BM_FMC_PFB01CR_B01DPE      (0x00000004U)  //!< Bit mask for FMC_PFB01CR_B01DPE.
#define BS_FMC_PFB01CR_B01DPE      (1U)  //!< Bitfield size in bits for FMC_PFB01CR_B01DPE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_B01DPE field.
#define BR_FMC_PFB01CR_B01DPE()   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01DPE))
#endif

//! @brief Format value for bitfield FMC_PFB01CR_B01DPE.
#define BF_FMC_PFB01CR_B01DPE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_B01DPE), uint32_t) & BM_FMC_PFB01CR_B01DPE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B01DPE field to a new value.
#define BW_FMC_PFB01CR_B01DPE(v)   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01DPE) = (v))
#endif
//@}

/*! @name Register FMC_PFB01CR, field B01ICE[3] (RW)
 *
 * This bit controls whether instruction fetches are loaded into the cache.
 *
 * Values:
 * - 0 - Do not cache instruction fetches.
 * - 1 - Cache instruction fetches.
 */
//@{
#define BP_FMC_PFB01CR_B01ICE      (3U)      //!< Bit position for FMC_PFB01CR_B01ICE.
#define BM_FMC_PFB01CR_B01ICE      (0x00000008U)  //!< Bit mask for FMC_PFB01CR_B01ICE.
#define BS_FMC_PFB01CR_B01ICE      (1U)  //!< Bitfield size in bits for FMC_PFB01CR_B01ICE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_B01ICE field.
#define BR_FMC_PFB01CR_B01ICE()   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01ICE))
#endif

//! @brief Format value for bitfield FMC_PFB01CR_B01ICE.
#define BF_FMC_PFB01CR_B01ICE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_B01ICE), uint32_t) & BM_FMC_PFB01CR_B01ICE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B01ICE field to a new value.
#define BW_FMC_PFB01CR_B01ICE(v)   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01ICE) = (v))
#endif
//@}

/*! @name Register FMC_PFB01CR, field B01DCE[4] (RW)
 *
 * This bit controls whether data references are loaded into the cache.
 *
 * Values:
 * - 0 - Do not cache data references.
 * - 1 - Cache data references.
 */
//@{
#define BP_FMC_PFB01CR_B01DCE      (4U)      //!< Bit position for FMC_PFB01CR_B01DCE.
#define BM_FMC_PFB01CR_B01DCE      (0x00000010U)  //!< Bit mask for FMC_PFB01CR_B01DCE.
#define BS_FMC_PFB01CR_B01DCE      (1U)  //!< Bitfield size in bits for FMC_PFB01CR_B01DCE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_B01DCE field.
#define BR_FMC_PFB01CR_B01DCE()   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01DCE))
#endif

//! @brief Format value for bitfield FMC_PFB01CR_B01DCE.
#define BF_FMC_PFB01CR_B01DCE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_B01DCE), uint32_t) & BM_FMC_PFB01CR_B01DCE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B01DCE field to a new value.
#define BW_FMC_PFB01CR_B01DCE(v)   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_B01DCE) = (v))
#endif
//@}

/*! @name Register FMC_PFB01CR, field CRC[7:5] (RW)
 *
 * This 3-bit field defines the replacement algorithm for accesses that are cached.
 *
 * Values:
 * - 000 - LRU replacement algorithm per set across all four ways
 * - 001 - Reserved
 * - 010 - Independent LRU with ways [0-1] for ifetches, [2-3] for data
 * - 011 - Independent LRU with ways [0-2] for ifetches, [3] for data
 * - 1xx - Reserved
 */
//@{
#define BP_FMC_PFB01CR_CRC      (5U)      //!< Bit position for FMC_PFB01CR_CRC.
#define BM_FMC_PFB01CR_CRC      (0x000000e0U)  //!< Bit mask for FMC_PFB01CR_CRC.
#define BS_FMC_PFB01CR_CRC      (3U)  //!< Bitfield size in bits for FMC_PFB01CR_CRC.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_CRC field.
#define BR_FMC_PFB01CR_CRC()   (HW_FMC_PFB01CR.B.CRC)
#endif

//! @brief Format value for bitfield FMC_PFB01CR_CRC.
#define BF_FMC_PFB01CR_CRC(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_CRC), uint32_t) & BM_FMC_PFB01CR_CRC)

#ifndef __LANGUAGE_ASM__
//! @brief Set the CRC field to a new value.
#define BW_FMC_PFB01CR_CRC(v)   (HW_FMC_PFB01CR_WR((HW_FMC_PFB01CR_RD() & ~BM_FMC_PFB01CR_CRC) | BF_FMC_PFB01CR_CRC(v)))
#endif
//@}

/*! @name Register FMC_PFB01CR, field B01MW[18:17] (RO)
 *
 * This read-only field defines the width of the bank 0-1 memory.
 *
 * Values:
 * - 00 - 32 bits
 * - 01 - 64 bits
 * - 10 - 128 bits
 * - 11 - Reserved
 */
//@{
#define BP_FMC_PFB01CR_B01MW      (17U)      //!< Bit position for FMC_PFB01CR_B01MW.
#define BM_FMC_PFB01CR_B01MW      (0x00060000U)  //!< Bit mask for FMC_PFB01CR_B01MW.
#define BS_FMC_PFB01CR_B01MW      (2U)  //!< Bitfield size in bits for FMC_PFB01CR_B01MW.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_B01MW field.
#define BR_FMC_PFB01CR_B01MW()   (HW_FMC_PFB01CR.B.B01MW)
#endif
//@}

/*! @name Register FMC_PFB01CR, field S_B_INV[19] (WORZ)
 *
 * This bit determines if the FMC's prefetch speculation buffer and the single entry page buffer are
 * to be invalidated (cleared). When this bit is written, the speculation buffer and single entry
 * buffer are immediately cleared. This bit always reads as zero.
 *
 * Values:
 * - 0 - Speculation buffer and single entry buffer are not affected.
 * - 1 - Invalidate (clear) speculation buffer and single entry buffer.
 */
//@{
#define BP_FMC_PFB01CR_S_B_INV      (19U)      //!< Bit position for FMC_PFB01CR_S_B_INV.
#define BM_FMC_PFB01CR_S_B_INV      (0x00080000U)  //!< Bit mask for FMC_PFB01CR_S_B_INV.
#define BS_FMC_PFB01CR_S_B_INV      (1U)  //!< Bitfield size in bits for FMC_PFB01CR_S_B_INV.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_S_B_INV field.
#define BR_FMC_PFB01CR_S_B_INV()   (BITBAND_ACCESS32(HW_FMC_PFB01CR_ADDR, BP_FMC_PFB01CR_S_B_INV))
#endif

//! @brief Format value for bitfield FMC_PFB01CR_S_B_INV.
#define BF_FMC_PFB01CR_S_B_INV(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_S_B_INV), uint32_t) & BM_FMC_PFB01CR_S_B_INV)
//@}

/*! @name Register FMC_PFB01CR, field CINV_WAY[23:20] (WORZ)
 *
 * These bits determine if the given cache way is to be invalidated (cleared). When a bit within
 * this field is written, the corresponding cache way is immediately invalidated: the way's tag,
 * data, and valid contents are cleared. This field always reads as zero. Cache invalidation takes
 * precedence over locking. The cache is invalidated by system reset. System software is required to
 * maintain memory coherency when any segment of the flash memory is programmed or erased.
 * Accordingly, cache invalidations must occur after a programming or erase event is completed and
 * before the new memory image is accessed. The bit setting definitions are for each bit in the
 * field.
 *
 * Values:
 * - 0 - No cache way invalidation for the corresponding cache
 * - 1 - Invalidate cache way for the corresponding cache: clear the tag, data, and vld bits of ways selected
 */
//@{
#define BP_FMC_PFB01CR_CINV_WAY      (20U)      //!< Bit position for FMC_PFB01CR_CINV_WAY.
#define BM_FMC_PFB01CR_CINV_WAY      (0x00f00000U)  //!< Bit mask for FMC_PFB01CR_CINV_WAY.
#define BS_FMC_PFB01CR_CINV_WAY      (4U)  //!< Bitfield size in bits for FMC_PFB01CR_CINV_WAY.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_CINV_WAY field.
#define BR_FMC_PFB01CR_CINV_WAY()   (HW_FMC_PFB01CR.B.CINV_WAY)
#endif

//! @brief Format value for bitfield FMC_PFB01CR_CINV_WAY.
#define BF_FMC_PFB01CR_CINV_WAY(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_CINV_WAY), uint32_t) & BM_FMC_PFB01CR_CINV_WAY)
//@}

/*! @name Register FMC_PFB01CR, field CLCK_WAY[27:24] (RW)
 *
 * These bits determine if the given cache way is locked such that its contents will not be
 * displaced by future misses. The bit setting definitions are for each bit in the field.
 *
 * Values:
 * - 0 - Cache way is unlocked and may be displaced
 * - 1 - Cache way is locked and its contents are not displaced
 */
//@{
#define BP_FMC_PFB01CR_CLCK_WAY      (24U)      //!< Bit position for FMC_PFB01CR_CLCK_WAY.
#define BM_FMC_PFB01CR_CLCK_WAY      (0x0f000000U)  //!< Bit mask for FMC_PFB01CR_CLCK_WAY.
#define BS_FMC_PFB01CR_CLCK_WAY      (4U)  //!< Bitfield size in bits for FMC_PFB01CR_CLCK_WAY.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_CLCK_WAY field.
#define BR_FMC_PFB01CR_CLCK_WAY()   (HW_FMC_PFB01CR.B.CLCK_WAY)
#endif

//! @brief Format value for bitfield FMC_PFB01CR_CLCK_WAY.
#define BF_FMC_PFB01CR_CLCK_WAY(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB01CR_CLCK_WAY), uint32_t) & BM_FMC_PFB01CR_CLCK_WAY)

#ifndef __LANGUAGE_ASM__
//! @brief Set the CLCK_WAY field to a new value.
#define BW_FMC_PFB01CR_CLCK_WAY(v)   (HW_FMC_PFB01CR_WR((HW_FMC_PFB01CR_RD() & ~BM_FMC_PFB01CR_CLCK_WAY) | BF_FMC_PFB01CR_CLCK_WAY(v)))
#endif
//@}

/*! @name Register FMC_PFB01CR, field B01RWSC[31:28] (RO)
 *
 * This read-only field defines the number of wait states required to access the bank 0-1 flash
 * memory. The relationship between the read access time of the flash array (expressed in system
 * clock cycles) and RWSC is defined as: Access time of flash array [system clocks] = RWSC + 1 The
 * FMC automatically calculates this value based on the ratio of the system clock speed to the flash
 * clock speed. For example, when this ratio is 4:1, the field's value is 3h.
 */
//@{
#define BP_FMC_PFB01CR_B01RWSC      (28U)      //!< Bit position for FMC_PFB01CR_B01RWSC.
#define BM_FMC_PFB01CR_B01RWSC      (0xf0000000U)  //!< Bit mask for FMC_PFB01CR_B01RWSC.
#define BS_FMC_PFB01CR_B01RWSC      (4U)  //!< Bitfield size in bits for FMC_PFB01CR_B01RWSC.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB01CR_B01RWSC field.
#define BR_FMC_PFB01CR_B01RWSC()   (HW_FMC_PFB01CR.B.B01RWSC)
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_PFB23CR - Flash Bank 2-3 Control Register
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_PFB23CR - Flash Bank 2-3 Control Register (RW)
 *
 * Reset value: 0x3004001fU
 *
 * This register has a format similar to that for PFB01CR, except it controls the operation of
 * memory banks 2-3, and the "global" cache control fields are empty.
 */
typedef union _hw_fmc_pfb23cr
{
    uint32_t U;
    struct _hw_fmc_pfb23cr_bitfields
    {
        uint32_t B23SEBE : 1; //!< [0] Bank 2-3 Single Entry Buffer Enable
        uint32_t B23IPE : 1; //!< [1] Bank 2-3 Instruction Prefetch Enable
        uint32_t B23DPE : 1; //!< [2] Bank 2-3 Data Prefetch Enable
        uint32_t B23ICE : 1; //!< [3] Bank 2-3 Instruction Cache Enable
        uint32_t B23DCE : 1; //!< [4] Bank 2-3 Data Cache Enable
        uint32_t RESERVED1 : 12; //!< [16:5] Reserved.
        uint32_t B23MW : 2; //!< [18:17] Bank 2-3 Memory Width
        uint32_t RESERVED2 : 9; //!< [27:19] 
        uint32_t B23RWSC : 4; //!< [31:28] Bank 2-3 Read Wait State Control
    } B;
} hw_fmc_pfb23cr_t;
#endif

/*!
 * @name Constants and macros for entire FMC_PFB23CR register
 */
//@{
#define HW_FMC_PFB23CR_ADDR      (REGS_FMC_BASE + 0x8U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_PFB23CR           (*(__IO hw_fmc_pfb23cr_t *) HW_FMC_PFB23CR_ADDR)
#define HW_FMC_PFB23CR_RD()      (HW_FMC_PFB23CR.U)
#define HW_FMC_PFB23CR_WR(v)     (HW_FMC_PFB23CR.U = (v))
#define HW_FMC_PFB23CR_SET(v)    (HW_FMC_PFB23CR_WR(HW_FMC_PFB23CR_RD() |  (v)))
#define HW_FMC_PFB23CR_CLR(v)    (HW_FMC_PFB23CR_WR(HW_FMC_PFB23CR_RD() & ~(v)))
#define HW_FMC_PFB23CR_TOG(v)    (HW_FMC_PFB23CR_WR(HW_FMC_PFB23CR_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_PFB23CR bitfields
 */

/*! @name Register FMC_PFB23CR, field B23SEBE[0] (RW)
 *
 * This bit controls whether the single entry buffer is enabled in response to flash read accesses.
 * Its operation is independent from the cache of banks 0-1. A high-to-low transition of this enable
 * forces the page buffer to be invalidated.
 *
 * Values:
 * - 0 - Single entry buffer is disabled.
 * - 1 - Single entry buffer is enabled.
 */
//@{
#define BP_FMC_PFB23CR_B23SEBE      (0U)      //!< Bit position for FMC_PFB23CR_B23SEBE.
#define BM_FMC_PFB23CR_B23SEBE      (0x00000001U)  //!< Bit mask for FMC_PFB23CR_B23SEBE.
#define BS_FMC_PFB23CR_B23SEBE      (1U)  //!< Bitfield size in bits for FMC_PFB23CR_B23SEBE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB23CR_B23SEBE field.
#define BR_FMC_PFB23CR_B23SEBE()   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23SEBE))
#endif

//! @brief Format value for bitfield FMC_PFB23CR_B23SEBE.
#define BF_FMC_PFB23CR_B23SEBE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB23CR_B23SEBE), uint32_t) & BM_FMC_PFB23CR_B23SEBE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B23SEBE field to a new value.
#define BW_FMC_PFB23CR_B23SEBE(v)   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23SEBE) = (v))
#endif
//@}

/*! @name Register FMC_PFB23CR, field B23IPE[1] (RW)
 *
 * This bit controls whether prefetches (or speculative accesses) are initiated in response to
 * instruction fetches.
 *
 * Values:
 * - 0 - Do not prefetch in response to instruction fetches.
 * - 1 - Enable prefetches in response to instruction fetches.
 */
//@{
#define BP_FMC_PFB23CR_B23IPE      (1U)      //!< Bit position for FMC_PFB23CR_B23IPE.
#define BM_FMC_PFB23CR_B23IPE      (0x00000002U)  //!< Bit mask for FMC_PFB23CR_B23IPE.
#define BS_FMC_PFB23CR_B23IPE      (1U)  //!< Bitfield size in bits for FMC_PFB23CR_B23IPE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB23CR_B23IPE field.
#define BR_FMC_PFB23CR_B23IPE()   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23IPE))
#endif

//! @brief Format value for bitfield FMC_PFB23CR_B23IPE.
#define BF_FMC_PFB23CR_B23IPE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB23CR_B23IPE), uint32_t) & BM_FMC_PFB23CR_B23IPE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B23IPE field to a new value.
#define BW_FMC_PFB23CR_B23IPE(v)   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23IPE) = (v))
#endif
//@}

/*! @name Register FMC_PFB23CR, field B23DPE[2] (RW)
 *
 * This bit controls whether prefetches (or speculative accesses) are initiated in response to data
 * references.
 *
 * Values:
 * - 0 - Do not prefetch in response to data references.
 * - 1 - Enable prefetches in response to data references.
 */
//@{
#define BP_FMC_PFB23CR_B23DPE      (2U)      //!< Bit position for FMC_PFB23CR_B23DPE.
#define BM_FMC_PFB23CR_B23DPE      (0x00000004U)  //!< Bit mask for FMC_PFB23CR_B23DPE.
#define BS_FMC_PFB23CR_B23DPE      (1U)  //!< Bitfield size in bits for FMC_PFB23CR_B23DPE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB23CR_B23DPE field.
#define BR_FMC_PFB23CR_B23DPE()   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23DPE))
#endif

//! @brief Format value for bitfield FMC_PFB23CR_B23DPE.
#define BF_FMC_PFB23CR_B23DPE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB23CR_B23DPE), uint32_t) & BM_FMC_PFB23CR_B23DPE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B23DPE field to a new value.
#define BW_FMC_PFB23CR_B23DPE(v)   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23DPE) = (v))
#endif
//@}

/*! @name Register FMC_PFB23CR, field B23ICE[3] (RW)
 *
 * This bit controls whether instruction fetches are loaded into the cache.
 *
 * Values:
 * - 0 - Do not cache instruction fetches.
 * - 1 - Cache instruction fetches.
 */
//@{
#define BP_FMC_PFB23CR_B23ICE      (3U)      //!< Bit position for FMC_PFB23CR_B23ICE.
#define BM_FMC_PFB23CR_B23ICE      (0x00000008U)  //!< Bit mask for FMC_PFB23CR_B23ICE.
#define BS_FMC_PFB23CR_B23ICE      (1U)  //!< Bitfield size in bits for FMC_PFB23CR_B23ICE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB23CR_B23ICE field.
#define BR_FMC_PFB23CR_B23ICE()   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23ICE))
#endif

//! @brief Format value for bitfield FMC_PFB23CR_B23ICE.
#define BF_FMC_PFB23CR_B23ICE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB23CR_B23ICE), uint32_t) & BM_FMC_PFB23CR_B23ICE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B23ICE field to a new value.
#define BW_FMC_PFB23CR_B23ICE(v)   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23ICE) = (v))
#endif
//@}

/*! @name Register FMC_PFB23CR, field B23DCE[4] (RW)
 *
 * This bit controls whether data references are loaded into the cache.
 *
 * Values:
 * - 0 - Do not cache data references.
 * - 1 - Cache data references.
 */
//@{
#define BP_FMC_PFB23CR_B23DCE      (4U)      //!< Bit position for FMC_PFB23CR_B23DCE.
#define BM_FMC_PFB23CR_B23DCE      (0x00000010U)  //!< Bit mask for FMC_PFB23CR_B23DCE.
#define BS_FMC_PFB23CR_B23DCE      (1U)  //!< Bitfield size in bits for FMC_PFB23CR_B23DCE.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB23CR_B23DCE field.
#define BR_FMC_PFB23CR_B23DCE()   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23DCE))
#endif

//! @brief Format value for bitfield FMC_PFB23CR_B23DCE.
#define BF_FMC_PFB23CR_B23DCE(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_PFB23CR_B23DCE), uint32_t) & BM_FMC_PFB23CR_B23DCE)

#ifndef __LANGUAGE_ASM__
//! @brief Set the B23DCE field to a new value.
#define BW_FMC_PFB23CR_B23DCE(v)   (BITBAND_ACCESS32(HW_FMC_PFB23CR_ADDR, BP_FMC_PFB23CR_B23DCE) = (v))
#endif
//@}

/*! @name Register FMC_PFB23CR, field B23MW[18:17] (RO)
 *
 * This read-only field defines the width of the bank 2-3 memory.
 *
 * Values:
 * - 00 - 32 bits
 * - 01 - 64 bits
 * - 10 - 128 bits
 * - 11 - Reserved
 */
//@{
#define BP_FMC_PFB23CR_B23MW      (17U)      //!< Bit position for FMC_PFB23CR_B23MW.
#define BM_FMC_PFB23CR_B23MW      (0x00060000U)  //!< Bit mask for FMC_PFB23CR_B23MW.
#define BS_FMC_PFB23CR_B23MW      (2U)  //!< Bitfield size in bits for FMC_PFB23CR_B23MW.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB23CR_B23MW field.
#define BR_FMC_PFB23CR_B23MW()   (HW_FMC_PFB23CR.B.B23MW)
#endif
//@}

/*! @name Register FMC_PFB23CR, field B23RWSC[31:28] (RO)
 *
 * This read-only field defines the number of wait states required to access the bank 2-3 flash
 * memory. The relationship between the read access time of the flash array (expressed in system
 * clock cycles) and RWSC is defined as: Access time of flash array [system clocks] = RWSC + 1
 */
//@{
#define BP_FMC_PFB23CR_B23RWSC      (28U)      //!< Bit position for FMC_PFB23CR_B23RWSC.
#define BM_FMC_PFB23CR_B23RWSC      (0xf0000000U)  //!< Bit mask for FMC_PFB23CR_B23RWSC.
#define BS_FMC_PFB23CR_B23RWSC      (4U)  //!< Bitfield size in bits for FMC_PFB23CR_B23RWSC.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_PFB23CR_B23RWSC field.
#define BR_FMC_PFB23CR_B23RWSC()   (HW_FMC_PFB23CR.B.B23RWSC)
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_TAGVDW0Sn - Cache Tag Storage
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_TAGVDW0Sn - Cache Tag Storage (RW)
 *
 * Reset value: 0x00000000U
 *
 * The 128-entry cache is a 4-way, set-associative cache with 4 sets. The ways are numbered 0-3 and
 * the sets are numbered 0-3. In TAGVDWxSy, x denotes the way, and y denotes the set. This section
 * represents tag/vld information for all 3 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_tagvdw0sn
{
    uint32_t U;
    struct _hw_fmc_tagvdw0sn_bitfields
    {
        uint32_t VALID : 1; //!< [0] 1-bit valid for cache entry
        uint32_t RESERVED0 : 5; //!< [5:1] 
        uint32_t TAG : 14; //!< [19:6] 14-bit tag for cache entry
        uint32_t RESERVED1 : 12; //!< [31:20] 
    } B;
} hw_fmc_tagvdw0sn_t;
#endif

/*!
 * @name Constants and macros for entire FMC_TAGVDW0Sn register
 */
//@{
//! @brief Number of instances of the FMC_TAGVDW0Sn register.
#define HW_FMC_TAGVDW0Sn_COUNT     (4U)

#define HW_FMC_TAGVDW0Sn_ADDR(n)   (REGS_FMC_BASE + 0x100U + (0x4U * (n)))

#ifndef __LANGUAGE_ASM__
#define HW_FMC_TAGVDW0Sn(n)        (*(__IO hw_fmc_tagvdw0sn_t *) HW_FMC_TAGVDW0Sn_ADDR(n))
#define HW_FMC_TAGVDW0Sn_RD(n)     (HW_FMC_TAGVDW0Sn(n).U)
#define HW_FMC_TAGVDW0Sn_WR(n, v)  (HW_FMC_TAGVDW0Sn(n).U = (v))
#define HW_FMC_TAGVDW0Sn_SET(n, v) (HW_FMC_TAGVDW0Sn_WR(n, HW_FMC_TAGVDW0Sn_RD(n) |  (v)))
#define HW_FMC_TAGVDW0Sn_CLR(n, v) (HW_FMC_TAGVDW0Sn_WR(n, HW_FMC_TAGVDW0Sn_RD(n) & ~(v)))
#define HW_FMC_TAGVDW0Sn_TOG(n, v) (HW_FMC_TAGVDW0Sn_WR(n, HW_FMC_TAGVDW0Sn_RD(n) ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_TAGVDW0Sn bitfields
 */

/*! @name Register FMC_TAGVDW0Sn, field VALID[0] (RW)
 */
//@{
#define BP_FMC_TAGVDW0Sn_VALID      (0U)      //!< Bit position for FMC_TAGVDW0Sn_VALID.
#define BM_FMC_TAGVDW0Sn_VALID      (0x00000001U)  //!< Bit mask for FMC_TAGVDW0Sn_VALID.
#define BS_FMC_TAGVDW0Sn_VALID      (1U)  //!< Bitfield size in bits for FMC_TAGVDW0Sn_VALID.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_TAGVDW0Sn_VALID field.
#define BR_FMC_TAGVDW0Sn_VALID(n)   (BITBAND_ACCESS32(HW_FMC_TAGVDW0Sn_ADDR(n), BP_FMC_TAGVDW0Sn_VALID))
#endif

//! @brief Format value for bitfield FMC_TAGVDW0Sn_VALID.
#define BF_FMC_TAGVDW0Sn_VALID(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_TAGVDW0Sn_VALID), uint32_t) & BM_FMC_TAGVDW0Sn_VALID)

#ifndef __LANGUAGE_ASM__
//! @brief Set the VALID field to a new value.
#define BW_FMC_TAGVDW0Sn_VALID(n, v)   (BITBAND_ACCESS32(HW_FMC_TAGVDW0Sn_ADDR(n), BP_FMC_TAGVDW0Sn_VALID) = (v))
#endif
//@}

/*! @name Register FMC_TAGVDW0Sn, field TAG[19:6] (RW)
 */
//@{
#define BP_FMC_TAGVDW0Sn_TAG      (6U)      //!< Bit position for FMC_TAGVDW0Sn_TAG.
#define BM_FMC_TAGVDW0Sn_TAG      (0x000fffc0U)  //!< Bit mask for FMC_TAGVDW0Sn_TAG.
#define BS_FMC_TAGVDW0Sn_TAG      (14U)  //!< Bitfield size in bits for FMC_TAGVDW0Sn_TAG.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_TAGVDW0Sn_TAG field.
#define BR_FMC_TAGVDW0Sn_TAG(n)   (HW_FMC_TAGVDW0Sn(n).B.TAG)
#endif

//! @brief Format value for bitfield FMC_TAGVDW0Sn_TAG.
#define BF_FMC_TAGVDW0Sn_TAG(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_TAGVDW0Sn_TAG), uint32_t) & BM_FMC_TAGVDW0Sn_TAG)

#ifndef __LANGUAGE_ASM__
//! @brief Set the TAG field to a new value.
#define BW_FMC_TAGVDW0Sn_TAG(n, v)   (HW_FMC_TAGVDW0Sn_WR(n, (HW_FMC_TAGVDW0Sn_RD(n) & ~BM_FMC_TAGVDW0Sn_TAG) | BF_FMC_TAGVDW0Sn_TAG(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_TAGVDW1Sn - Cache Tag Storage
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_TAGVDW1Sn - Cache Tag Storage (RW)
 *
 * Reset value: 0x00000000U
 *
 * The 128-entry cache is a 4-way, set-associative cache with 4 sets. The ways are numbered 0-3 and
 * the sets are numbered 0-3. In TAGVDWxSy, x denotes the way, and y denotes the set. This section
 * represents tag/vld information for all 3 sets (n=0-3) in way 1.
 */
typedef union _hw_fmc_tagvdw1sn
{
    uint32_t U;
    struct _hw_fmc_tagvdw1sn_bitfields
    {
        uint32_t VALID : 1; //!< [0] 1-bit valid for cache entry
        uint32_t RESERVED0 : 5; //!< [5:1] 
        uint32_t TAG : 14; //!< [19:6] 14-bit tag for cache entry
        uint32_t RESERVED1 : 12; //!< [31:20] 
    } B;
} hw_fmc_tagvdw1sn_t;
#endif

/*!
 * @name Constants and macros for entire FMC_TAGVDW1Sn register
 */
//@{
//! @brief Number of instances of the FMC_TAGVDW1Sn register.
#define HW_FMC_TAGVDW1Sn_COUNT     (4U)

#define HW_FMC_TAGVDW1Sn_ADDR(n)   (REGS_FMC_BASE + 0x110U + (0x4U * (n)))

#ifndef __LANGUAGE_ASM__
#define HW_FMC_TAGVDW1Sn(n)        (*(__IO hw_fmc_tagvdw1sn_t *) HW_FMC_TAGVDW1Sn_ADDR(n))
#define HW_FMC_TAGVDW1Sn_RD(n)     (HW_FMC_TAGVDW1Sn(n).U)
#define HW_FMC_TAGVDW1Sn_WR(n, v)  (HW_FMC_TAGVDW1Sn(n).U = (v))
#define HW_FMC_TAGVDW1Sn_SET(n, v) (HW_FMC_TAGVDW1Sn_WR(n, HW_FMC_TAGVDW1Sn_RD(n) |  (v)))
#define HW_FMC_TAGVDW1Sn_CLR(n, v) (HW_FMC_TAGVDW1Sn_WR(n, HW_FMC_TAGVDW1Sn_RD(n) & ~(v)))
#define HW_FMC_TAGVDW1Sn_TOG(n, v) (HW_FMC_TAGVDW1Sn_WR(n, HW_FMC_TAGVDW1Sn_RD(n) ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_TAGVDW1Sn bitfields
 */

/*! @name Register FMC_TAGVDW1Sn, field VALID[0] (RW)
 */
//@{
#define BP_FMC_TAGVDW1Sn_VALID      (0U)      //!< Bit position for FMC_TAGVDW1Sn_VALID.
#define BM_FMC_TAGVDW1Sn_VALID      (0x00000001U)  //!< Bit mask for FMC_TAGVDW1Sn_VALID.
#define BS_FMC_TAGVDW1Sn_VALID      (1U)  //!< Bitfield size in bits for FMC_TAGVDW1Sn_VALID.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_TAGVDW1Sn_VALID field.
#define BR_FMC_TAGVDW1Sn_VALID(n)   (BITBAND_ACCESS32(HW_FMC_TAGVDW1Sn_ADDR(n), BP_FMC_TAGVDW1Sn_VALID))
#endif

//! @brief Format value for bitfield FMC_TAGVDW1Sn_VALID.
#define BF_FMC_TAGVDW1Sn_VALID(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_TAGVDW1Sn_VALID), uint32_t) & BM_FMC_TAGVDW1Sn_VALID)

#ifndef __LANGUAGE_ASM__
//! @brief Set the VALID field to a new value.
#define BW_FMC_TAGVDW1Sn_VALID(n, v)   (BITBAND_ACCESS32(HW_FMC_TAGVDW1Sn_ADDR(n), BP_FMC_TAGVDW1Sn_VALID) = (v))
#endif
//@}

/*! @name Register FMC_TAGVDW1Sn, field TAG[19:6] (RW)
 */
//@{
#define BP_FMC_TAGVDW1Sn_TAG      (6U)      //!< Bit position for FMC_TAGVDW1Sn_TAG.
#define BM_FMC_TAGVDW1Sn_TAG      (0x000fffc0U)  //!< Bit mask for FMC_TAGVDW1Sn_TAG.
#define BS_FMC_TAGVDW1Sn_TAG      (14U)  //!< Bitfield size in bits for FMC_TAGVDW1Sn_TAG.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_TAGVDW1Sn_TAG field.
#define BR_FMC_TAGVDW1Sn_TAG(n)   (HW_FMC_TAGVDW1Sn(n).B.TAG)
#endif

//! @brief Format value for bitfield FMC_TAGVDW1Sn_TAG.
#define BF_FMC_TAGVDW1Sn_TAG(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_TAGVDW1Sn_TAG), uint32_t) & BM_FMC_TAGVDW1Sn_TAG)

#ifndef __LANGUAGE_ASM__
//! @brief Set the TAG field to a new value.
#define BW_FMC_TAGVDW1Sn_TAG(n, v)   (HW_FMC_TAGVDW1Sn_WR(n, (HW_FMC_TAGVDW1Sn_RD(n) & ~BM_FMC_TAGVDW1Sn_TAG) | BF_FMC_TAGVDW1Sn_TAG(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_TAGVDW2Sn - Cache Tag Storage
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_TAGVDW2Sn - Cache Tag Storage (RW)
 *
 * Reset value: 0x00000000U
 *
 * The 128-entry cache is a 4-way, set-associative cache with 4 sets. The ways are numbered 0-3 and
 * the sets are numbered 0-3. In TAGVDWxSy, x denotes the way, and y denotes the set. This section
 * represents tag/vld information for all 3 sets (n=0-3) in way 2.
 */
typedef union _hw_fmc_tagvdw2sn
{
    uint32_t U;
    struct _hw_fmc_tagvdw2sn_bitfields
    {
        uint32_t VALID : 1; //!< [0] 1-bit valid for cache entry
        uint32_t RESERVED0 : 5; //!< [5:1] 
        uint32_t TAG : 14; //!< [19:6] 14-bit tag for cache entry
        uint32_t RESERVED1 : 12; //!< [31:20] 
    } B;
} hw_fmc_tagvdw2sn_t;
#endif

/*!
 * @name Constants and macros for entire FMC_TAGVDW2Sn register
 */
//@{
//! @brief Number of instances of the FMC_TAGVDW2Sn register.
#define HW_FMC_TAGVDW2Sn_COUNT     (4U)

#define HW_FMC_TAGVDW2Sn_ADDR(n)   (REGS_FMC_BASE + 0x120U + (0x4U * (n)))

#ifndef __LANGUAGE_ASM__
#define HW_FMC_TAGVDW2Sn(n)        (*(__IO hw_fmc_tagvdw2sn_t *) HW_FMC_TAGVDW2Sn_ADDR(n))
#define HW_FMC_TAGVDW2Sn_RD(n)     (HW_FMC_TAGVDW2Sn(n).U)
#define HW_FMC_TAGVDW2Sn_WR(n, v)  (HW_FMC_TAGVDW2Sn(n).U = (v))
#define HW_FMC_TAGVDW2Sn_SET(n, v) (HW_FMC_TAGVDW2Sn_WR(n, HW_FMC_TAGVDW2Sn_RD(n) |  (v)))
#define HW_FMC_TAGVDW2Sn_CLR(n, v) (HW_FMC_TAGVDW2Sn_WR(n, HW_FMC_TAGVDW2Sn_RD(n) & ~(v)))
#define HW_FMC_TAGVDW2Sn_TOG(n, v) (HW_FMC_TAGVDW2Sn_WR(n, HW_FMC_TAGVDW2Sn_RD(n) ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_TAGVDW2Sn bitfields
 */

/*! @name Register FMC_TAGVDW2Sn, field VALID[0] (RW)
 */
//@{
#define BP_FMC_TAGVDW2Sn_VALID      (0U)      //!< Bit position for FMC_TAGVDW2Sn_VALID.
#define BM_FMC_TAGVDW2Sn_VALID      (0x00000001U)  //!< Bit mask for FMC_TAGVDW2Sn_VALID.
#define BS_FMC_TAGVDW2Sn_VALID      (1U)  //!< Bitfield size in bits for FMC_TAGVDW2Sn_VALID.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_TAGVDW2Sn_VALID field.
#define BR_FMC_TAGVDW2Sn_VALID(n)   (BITBAND_ACCESS32(HW_FMC_TAGVDW2Sn_ADDR(n), BP_FMC_TAGVDW2Sn_VALID))
#endif

//! @brief Format value for bitfield FMC_TAGVDW2Sn_VALID.
#define BF_FMC_TAGVDW2Sn_VALID(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_TAGVDW2Sn_VALID), uint32_t) & BM_FMC_TAGVDW2Sn_VALID)

#ifndef __LANGUAGE_ASM__
//! @brief Set the VALID field to a new value.
#define BW_FMC_TAGVDW2Sn_VALID(n, v)   (BITBAND_ACCESS32(HW_FMC_TAGVDW2Sn_ADDR(n), BP_FMC_TAGVDW2Sn_VALID) = (v))
#endif
//@}

/*! @name Register FMC_TAGVDW2Sn, field TAG[19:6] (RW)
 */
//@{
#define BP_FMC_TAGVDW2Sn_TAG      (6U)      //!< Bit position for FMC_TAGVDW2Sn_TAG.
#define BM_FMC_TAGVDW2Sn_TAG      (0x000fffc0U)  //!< Bit mask for FMC_TAGVDW2Sn_TAG.
#define BS_FMC_TAGVDW2Sn_TAG      (14U)  //!< Bitfield size in bits for FMC_TAGVDW2Sn_TAG.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_TAGVDW2Sn_TAG field.
#define BR_FMC_TAGVDW2Sn_TAG(n)   (HW_FMC_TAGVDW2Sn(n).B.TAG)
#endif

//! @brief Format value for bitfield FMC_TAGVDW2Sn_TAG.
#define BF_FMC_TAGVDW2Sn_TAG(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_TAGVDW2Sn_TAG), uint32_t) & BM_FMC_TAGVDW2Sn_TAG)

#ifndef __LANGUAGE_ASM__
//! @brief Set the TAG field to a new value.
#define BW_FMC_TAGVDW2Sn_TAG(n, v)   (HW_FMC_TAGVDW2Sn_WR(n, (HW_FMC_TAGVDW2Sn_RD(n) & ~BM_FMC_TAGVDW2Sn_TAG) | BF_FMC_TAGVDW2Sn_TAG(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_TAGVDW3Sn - Cache Tag Storage
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_TAGVDW3Sn - Cache Tag Storage (RW)
 *
 * Reset value: 0x00000000U
 *
 * The 128-entry cache is a 4-way, set-associative cache with 4 sets. The ways are numbered 0-3 and
 * the sets are numbered 0-3. In TAGVDWxSy, x denotes the way, and y denotes the set. This section
 * represents tag/vld information for all 3 sets (n=0-3) in way 3.
 */
typedef union _hw_fmc_tagvdw3sn
{
    uint32_t U;
    struct _hw_fmc_tagvdw3sn_bitfields
    {
        uint32_t VALID : 1; //!< [0] 1-bit valid for cache entry
        uint32_t RESERVED0 : 5; //!< [5:1] 
        uint32_t TAG : 14; //!< [19:6] 14-bit tag for cache entry
        uint32_t RESERVED1 : 12; //!< [31:20] 
    } B;
} hw_fmc_tagvdw3sn_t;
#endif

/*!
 * @name Constants and macros for entire FMC_TAGVDW3Sn register
 */
//@{
//! @brief Number of instances of the FMC_TAGVDW3Sn register.
#define HW_FMC_TAGVDW3Sn_COUNT     (4U)

#define HW_FMC_TAGVDW3Sn_ADDR(n)   (REGS_FMC_BASE + 0x130U + (0x4U * (n)))

#ifndef __LANGUAGE_ASM__
#define HW_FMC_TAGVDW3Sn(n)        (*(__IO hw_fmc_tagvdw3sn_t *) HW_FMC_TAGVDW3Sn_ADDR(n))
#define HW_FMC_TAGVDW3Sn_RD(n)     (HW_FMC_TAGVDW3Sn(n).U)
#define HW_FMC_TAGVDW3Sn_WR(n, v)  (HW_FMC_TAGVDW3Sn(n).U = (v))
#define HW_FMC_TAGVDW3Sn_SET(n, v) (HW_FMC_TAGVDW3Sn_WR(n, HW_FMC_TAGVDW3Sn_RD(n) |  (v)))
#define HW_FMC_TAGVDW3Sn_CLR(n, v) (HW_FMC_TAGVDW3Sn_WR(n, HW_FMC_TAGVDW3Sn_RD(n) & ~(v)))
#define HW_FMC_TAGVDW3Sn_TOG(n, v) (HW_FMC_TAGVDW3Sn_WR(n, HW_FMC_TAGVDW3Sn_RD(n) ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_TAGVDW3Sn bitfields
 */

/*! @name Register FMC_TAGVDW3Sn, field VALID[0] (RW)
 */
//@{
#define BP_FMC_TAGVDW3Sn_VALID      (0U)      //!< Bit position for FMC_TAGVDW3Sn_VALID.
#define BM_FMC_TAGVDW3Sn_VALID      (0x00000001U)  //!< Bit mask for FMC_TAGVDW3Sn_VALID.
#define BS_FMC_TAGVDW3Sn_VALID      (1U)  //!< Bitfield size in bits for FMC_TAGVDW3Sn_VALID.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_TAGVDW3Sn_VALID field.
#define BR_FMC_TAGVDW3Sn_VALID(n)   (BITBAND_ACCESS32(HW_FMC_TAGVDW3Sn_ADDR(n), BP_FMC_TAGVDW3Sn_VALID))
#endif

//! @brief Format value for bitfield FMC_TAGVDW3Sn_VALID.
#define BF_FMC_TAGVDW3Sn_VALID(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_TAGVDW3Sn_VALID), uint32_t) & BM_FMC_TAGVDW3Sn_VALID)

#ifndef __LANGUAGE_ASM__
//! @brief Set the VALID field to a new value.
#define BW_FMC_TAGVDW3Sn_VALID(n, v)   (BITBAND_ACCESS32(HW_FMC_TAGVDW3Sn_ADDR(n), BP_FMC_TAGVDW3Sn_VALID) = (v))
#endif
//@}

/*! @name Register FMC_TAGVDW3Sn, field TAG[19:6] (RW)
 */
//@{
#define BP_FMC_TAGVDW3Sn_TAG      (6U)      //!< Bit position for FMC_TAGVDW3Sn_TAG.
#define BM_FMC_TAGVDW3Sn_TAG      (0x000fffc0U)  //!< Bit mask for FMC_TAGVDW3Sn_TAG.
#define BS_FMC_TAGVDW3Sn_TAG      (14U)  //!< Bitfield size in bits for FMC_TAGVDW3Sn_TAG.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_TAGVDW3Sn_TAG field.
#define BR_FMC_TAGVDW3Sn_TAG(n)   (HW_FMC_TAGVDW3Sn(n).B.TAG)
#endif

//! @brief Format value for bitfield FMC_TAGVDW3Sn_TAG.
#define BF_FMC_TAGVDW3Sn_TAG(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_TAGVDW3Sn_TAG), uint32_t) & BM_FMC_TAGVDW3Sn_TAG)

#ifndef __LANGUAGE_ASM__
//! @brief Set the TAG field to a new value.
#define BW_FMC_TAGVDW3Sn_TAG(n, v)   (HW_FMC_TAGVDW3Sn_WR(n, (HW_FMC_TAGVDW3Sn_RD(n) & ~BM_FMC_TAGVDW3Sn_TAG) | BF_FMC_TAGVDW3Sn_TAG(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S0UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S0UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s0um
{
    uint32_t U;
    struct _hw_fmc_dataw0s0um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw0s0um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S0UM register
 */
//@{
#define HW_FMC_DATAW0S0UM_ADDR      (REGS_FMC_BASE + 0x200U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S0UM           (*(__IO hw_fmc_dataw0s0um_t *) HW_FMC_DATAW0S0UM_ADDR)
#define HW_FMC_DATAW0S0UM_RD()      (HW_FMC_DATAW0S0UM.U)
#define HW_FMC_DATAW0S0UM_WR(v)     (HW_FMC_DATAW0S0UM.U = (v))
#define HW_FMC_DATAW0S0UM_SET(v)    (HW_FMC_DATAW0S0UM_WR(HW_FMC_DATAW0S0UM_RD() |  (v)))
#define HW_FMC_DATAW0S0UM_CLR(v)    (HW_FMC_DATAW0S0UM_WR(HW_FMC_DATAW0S0UM_RD() & ~(v)))
#define HW_FMC_DATAW0S0UM_TOG(v)    (HW_FMC_DATAW0S0UM_WR(HW_FMC_DATAW0S0UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S0UM bitfields
 */

/*! @name Register FMC_DATAW0S0UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S0UM_DATA      (0U)      //!< Bit position for FMC_DATAW0S0UM_DATA.
#define BM_FMC_DATAW0S0UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S0UM_DATA.
#define BS_FMC_DATAW0S0UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S0UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S0UM_DATA field.
#define BR_FMC_DATAW0S0UM_DATA()   (HW_FMC_DATAW0S0UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S0UM_DATA.
#define BF_FMC_DATAW0S0UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S0UM_DATA), uint32_t) & BM_FMC_DATAW0S0UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S0UM_DATA(v)   (HW_FMC_DATAW0S0UM_WR((HW_FMC_DATAW0S0UM_RD() & ~BM_FMC_DATAW0S0UM_DATA) | BF_FMC_DATAW0S0UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S0MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S0MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s0mu
{
    uint32_t U;
    struct _hw_fmc_dataw0s0mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw0s0mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S0MU register
 */
//@{
#define HW_FMC_DATAW0S0MU_ADDR      (REGS_FMC_BASE + 0x204U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S0MU           (*(__IO hw_fmc_dataw0s0mu_t *) HW_FMC_DATAW0S0MU_ADDR)
#define HW_FMC_DATAW0S0MU_RD()      (HW_FMC_DATAW0S0MU.U)
#define HW_FMC_DATAW0S0MU_WR(v)     (HW_FMC_DATAW0S0MU.U = (v))
#define HW_FMC_DATAW0S0MU_SET(v)    (HW_FMC_DATAW0S0MU_WR(HW_FMC_DATAW0S0MU_RD() |  (v)))
#define HW_FMC_DATAW0S0MU_CLR(v)    (HW_FMC_DATAW0S0MU_WR(HW_FMC_DATAW0S0MU_RD() & ~(v)))
#define HW_FMC_DATAW0S0MU_TOG(v)    (HW_FMC_DATAW0S0MU_WR(HW_FMC_DATAW0S0MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S0MU bitfields
 */

/*! @name Register FMC_DATAW0S0MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S0MU_DATA      (0U)      //!< Bit position for FMC_DATAW0S0MU_DATA.
#define BM_FMC_DATAW0S0MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S0MU_DATA.
#define BS_FMC_DATAW0S0MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S0MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S0MU_DATA field.
#define BR_FMC_DATAW0S0MU_DATA()   (HW_FMC_DATAW0S0MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S0MU_DATA.
#define BF_FMC_DATAW0S0MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S0MU_DATA), uint32_t) & BM_FMC_DATAW0S0MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S0MU_DATA(v)   (HW_FMC_DATAW0S0MU_WR((HW_FMC_DATAW0S0MU_RD() & ~BM_FMC_DATAW0S0MU_DATA) | BF_FMC_DATAW0S0MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S0ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S0ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s0ml
{
    uint32_t U;
    struct _hw_fmc_dataw0s0ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw0s0ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S0ML register
 */
//@{
#define HW_FMC_DATAW0S0ML_ADDR      (REGS_FMC_BASE + 0x208U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S0ML           (*(__IO hw_fmc_dataw0s0ml_t *) HW_FMC_DATAW0S0ML_ADDR)
#define HW_FMC_DATAW0S0ML_RD()      (HW_FMC_DATAW0S0ML.U)
#define HW_FMC_DATAW0S0ML_WR(v)     (HW_FMC_DATAW0S0ML.U = (v))
#define HW_FMC_DATAW0S0ML_SET(v)    (HW_FMC_DATAW0S0ML_WR(HW_FMC_DATAW0S0ML_RD() |  (v)))
#define HW_FMC_DATAW0S0ML_CLR(v)    (HW_FMC_DATAW0S0ML_WR(HW_FMC_DATAW0S0ML_RD() & ~(v)))
#define HW_FMC_DATAW0S0ML_TOG(v)    (HW_FMC_DATAW0S0ML_WR(HW_FMC_DATAW0S0ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S0ML bitfields
 */

/*! @name Register FMC_DATAW0S0ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S0ML_DATA      (0U)      //!< Bit position for FMC_DATAW0S0ML_DATA.
#define BM_FMC_DATAW0S0ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S0ML_DATA.
#define BS_FMC_DATAW0S0ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S0ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S0ML_DATA field.
#define BR_FMC_DATAW0S0ML_DATA()   (HW_FMC_DATAW0S0ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S0ML_DATA.
#define BF_FMC_DATAW0S0ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S0ML_DATA), uint32_t) & BM_FMC_DATAW0S0ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S0ML_DATA(v)   (HW_FMC_DATAW0S0ML_WR((HW_FMC_DATAW0S0ML_RD() & ~BM_FMC_DATAW0S0ML_DATA) | BF_FMC_DATAW0S0ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S0LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S0LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s0lm
{
    uint32_t U;
    struct _hw_fmc_dataw0s0lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw0s0lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S0LM register
 */
//@{
#define HW_FMC_DATAW0S0LM_ADDR      (REGS_FMC_BASE + 0x20cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S0LM           (*(__IO hw_fmc_dataw0s0lm_t *) HW_FMC_DATAW0S0LM_ADDR)
#define HW_FMC_DATAW0S0LM_RD()      (HW_FMC_DATAW0S0LM.U)
#define HW_FMC_DATAW0S0LM_WR(v)     (HW_FMC_DATAW0S0LM.U = (v))
#define HW_FMC_DATAW0S0LM_SET(v)    (HW_FMC_DATAW0S0LM_WR(HW_FMC_DATAW0S0LM_RD() |  (v)))
#define HW_FMC_DATAW0S0LM_CLR(v)    (HW_FMC_DATAW0S0LM_WR(HW_FMC_DATAW0S0LM_RD() & ~(v)))
#define HW_FMC_DATAW0S0LM_TOG(v)    (HW_FMC_DATAW0S0LM_WR(HW_FMC_DATAW0S0LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S0LM bitfields
 */

/*! @name Register FMC_DATAW0S0LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S0LM_DATA      (0U)      //!< Bit position for FMC_DATAW0S0LM_DATA.
#define BM_FMC_DATAW0S0LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S0LM_DATA.
#define BS_FMC_DATAW0S0LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S0LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S0LM_DATA field.
#define BR_FMC_DATAW0S0LM_DATA()   (HW_FMC_DATAW0S0LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S0LM_DATA.
#define BF_FMC_DATAW0S0LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S0LM_DATA), uint32_t) & BM_FMC_DATAW0S0LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S0LM_DATA(v)   (HW_FMC_DATAW0S0LM_WR((HW_FMC_DATAW0S0LM_RD() & ~BM_FMC_DATAW0S0LM_DATA) | BF_FMC_DATAW0S0LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S1UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S1UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s1um
{
    uint32_t U;
    struct _hw_fmc_dataw0s1um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw0s1um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S1UM register
 */
//@{
#define HW_FMC_DATAW0S1UM_ADDR      (REGS_FMC_BASE + 0x210U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S1UM           (*(__IO hw_fmc_dataw0s1um_t *) HW_FMC_DATAW0S1UM_ADDR)
#define HW_FMC_DATAW0S1UM_RD()      (HW_FMC_DATAW0S1UM.U)
#define HW_FMC_DATAW0S1UM_WR(v)     (HW_FMC_DATAW0S1UM.U = (v))
#define HW_FMC_DATAW0S1UM_SET(v)    (HW_FMC_DATAW0S1UM_WR(HW_FMC_DATAW0S1UM_RD() |  (v)))
#define HW_FMC_DATAW0S1UM_CLR(v)    (HW_FMC_DATAW0S1UM_WR(HW_FMC_DATAW0S1UM_RD() & ~(v)))
#define HW_FMC_DATAW0S1UM_TOG(v)    (HW_FMC_DATAW0S1UM_WR(HW_FMC_DATAW0S1UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S1UM bitfields
 */

/*! @name Register FMC_DATAW0S1UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S1UM_DATA      (0U)      //!< Bit position for FMC_DATAW0S1UM_DATA.
#define BM_FMC_DATAW0S1UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S1UM_DATA.
#define BS_FMC_DATAW0S1UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S1UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S1UM_DATA field.
#define BR_FMC_DATAW0S1UM_DATA()   (HW_FMC_DATAW0S1UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S1UM_DATA.
#define BF_FMC_DATAW0S1UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S1UM_DATA), uint32_t) & BM_FMC_DATAW0S1UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S1UM_DATA(v)   (HW_FMC_DATAW0S1UM_WR((HW_FMC_DATAW0S1UM_RD() & ~BM_FMC_DATAW0S1UM_DATA) | BF_FMC_DATAW0S1UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S1MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S1MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s1mu
{
    uint32_t U;
    struct _hw_fmc_dataw0s1mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw0s1mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S1MU register
 */
//@{
#define HW_FMC_DATAW0S1MU_ADDR      (REGS_FMC_BASE + 0x214U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S1MU           (*(__IO hw_fmc_dataw0s1mu_t *) HW_FMC_DATAW0S1MU_ADDR)
#define HW_FMC_DATAW0S1MU_RD()      (HW_FMC_DATAW0S1MU.U)
#define HW_FMC_DATAW0S1MU_WR(v)     (HW_FMC_DATAW0S1MU.U = (v))
#define HW_FMC_DATAW0S1MU_SET(v)    (HW_FMC_DATAW0S1MU_WR(HW_FMC_DATAW0S1MU_RD() |  (v)))
#define HW_FMC_DATAW0S1MU_CLR(v)    (HW_FMC_DATAW0S1MU_WR(HW_FMC_DATAW0S1MU_RD() & ~(v)))
#define HW_FMC_DATAW0S1MU_TOG(v)    (HW_FMC_DATAW0S1MU_WR(HW_FMC_DATAW0S1MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S1MU bitfields
 */

/*! @name Register FMC_DATAW0S1MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S1MU_DATA      (0U)      //!< Bit position for FMC_DATAW0S1MU_DATA.
#define BM_FMC_DATAW0S1MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S1MU_DATA.
#define BS_FMC_DATAW0S1MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S1MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S1MU_DATA field.
#define BR_FMC_DATAW0S1MU_DATA()   (HW_FMC_DATAW0S1MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S1MU_DATA.
#define BF_FMC_DATAW0S1MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S1MU_DATA), uint32_t) & BM_FMC_DATAW0S1MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S1MU_DATA(v)   (HW_FMC_DATAW0S1MU_WR((HW_FMC_DATAW0S1MU_RD() & ~BM_FMC_DATAW0S1MU_DATA) | BF_FMC_DATAW0S1MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S1ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S1ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s1ml
{
    uint32_t U;
    struct _hw_fmc_dataw0s1ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw0s1ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S1ML register
 */
//@{
#define HW_FMC_DATAW0S1ML_ADDR      (REGS_FMC_BASE + 0x218U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S1ML           (*(__IO hw_fmc_dataw0s1ml_t *) HW_FMC_DATAW0S1ML_ADDR)
#define HW_FMC_DATAW0S1ML_RD()      (HW_FMC_DATAW0S1ML.U)
#define HW_FMC_DATAW0S1ML_WR(v)     (HW_FMC_DATAW0S1ML.U = (v))
#define HW_FMC_DATAW0S1ML_SET(v)    (HW_FMC_DATAW0S1ML_WR(HW_FMC_DATAW0S1ML_RD() |  (v)))
#define HW_FMC_DATAW0S1ML_CLR(v)    (HW_FMC_DATAW0S1ML_WR(HW_FMC_DATAW0S1ML_RD() & ~(v)))
#define HW_FMC_DATAW0S1ML_TOG(v)    (HW_FMC_DATAW0S1ML_WR(HW_FMC_DATAW0S1ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S1ML bitfields
 */

/*! @name Register FMC_DATAW0S1ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S1ML_DATA      (0U)      //!< Bit position for FMC_DATAW0S1ML_DATA.
#define BM_FMC_DATAW0S1ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S1ML_DATA.
#define BS_FMC_DATAW0S1ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S1ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S1ML_DATA field.
#define BR_FMC_DATAW0S1ML_DATA()   (HW_FMC_DATAW0S1ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S1ML_DATA.
#define BF_FMC_DATAW0S1ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S1ML_DATA), uint32_t) & BM_FMC_DATAW0S1ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S1ML_DATA(v)   (HW_FMC_DATAW0S1ML_WR((HW_FMC_DATAW0S1ML_RD() & ~BM_FMC_DATAW0S1ML_DATA) | BF_FMC_DATAW0S1ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S1LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S1LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s1lm
{
    uint32_t U;
    struct _hw_fmc_dataw0s1lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw0s1lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S1LM register
 */
//@{
#define HW_FMC_DATAW0S1LM_ADDR      (REGS_FMC_BASE + 0x21cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S1LM           (*(__IO hw_fmc_dataw0s1lm_t *) HW_FMC_DATAW0S1LM_ADDR)
#define HW_FMC_DATAW0S1LM_RD()      (HW_FMC_DATAW0S1LM.U)
#define HW_FMC_DATAW0S1LM_WR(v)     (HW_FMC_DATAW0S1LM.U = (v))
#define HW_FMC_DATAW0S1LM_SET(v)    (HW_FMC_DATAW0S1LM_WR(HW_FMC_DATAW0S1LM_RD() |  (v)))
#define HW_FMC_DATAW0S1LM_CLR(v)    (HW_FMC_DATAW0S1LM_WR(HW_FMC_DATAW0S1LM_RD() & ~(v)))
#define HW_FMC_DATAW0S1LM_TOG(v)    (HW_FMC_DATAW0S1LM_WR(HW_FMC_DATAW0S1LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S1LM bitfields
 */

/*! @name Register FMC_DATAW0S1LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S1LM_DATA      (0U)      //!< Bit position for FMC_DATAW0S1LM_DATA.
#define BM_FMC_DATAW0S1LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S1LM_DATA.
#define BS_FMC_DATAW0S1LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S1LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S1LM_DATA field.
#define BR_FMC_DATAW0S1LM_DATA()   (HW_FMC_DATAW0S1LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S1LM_DATA.
#define BF_FMC_DATAW0S1LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S1LM_DATA), uint32_t) & BM_FMC_DATAW0S1LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S1LM_DATA(v)   (HW_FMC_DATAW0S1LM_WR((HW_FMC_DATAW0S1LM_RD() & ~BM_FMC_DATAW0S1LM_DATA) | BF_FMC_DATAW0S1LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S2UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S2UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s2um
{
    uint32_t U;
    struct _hw_fmc_dataw0s2um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw0s2um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S2UM register
 */
//@{
#define HW_FMC_DATAW0S2UM_ADDR      (REGS_FMC_BASE + 0x220U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S2UM           (*(__IO hw_fmc_dataw0s2um_t *) HW_FMC_DATAW0S2UM_ADDR)
#define HW_FMC_DATAW0S2UM_RD()      (HW_FMC_DATAW0S2UM.U)
#define HW_FMC_DATAW0S2UM_WR(v)     (HW_FMC_DATAW0S2UM.U = (v))
#define HW_FMC_DATAW0S2UM_SET(v)    (HW_FMC_DATAW0S2UM_WR(HW_FMC_DATAW0S2UM_RD() |  (v)))
#define HW_FMC_DATAW0S2UM_CLR(v)    (HW_FMC_DATAW0S2UM_WR(HW_FMC_DATAW0S2UM_RD() & ~(v)))
#define HW_FMC_DATAW0S2UM_TOG(v)    (HW_FMC_DATAW0S2UM_WR(HW_FMC_DATAW0S2UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S2UM bitfields
 */

/*! @name Register FMC_DATAW0S2UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S2UM_DATA      (0U)      //!< Bit position for FMC_DATAW0S2UM_DATA.
#define BM_FMC_DATAW0S2UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S2UM_DATA.
#define BS_FMC_DATAW0S2UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S2UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S2UM_DATA field.
#define BR_FMC_DATAW0S2UM_DATA()   (HW_FMC_DATAW0S2UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S2UM_DATA.
#define BF_FMC_DATAW0S2UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S2UM_DATA), uint32_t) & BM_FMC_DATAW0S2UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S2UM_DATA(v)   (HW_FMC_DATAW0S2UM_WR((HW_FMC_DATAW0S2UM_RD() & ~BM_FMC_DATAW0S2UM_DATA) | BF_FMC_DATAW0S2UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S2MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S2MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s2mu
{
    uint32_t U;
    struct _hw_fmc_dataw0s2mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw0s2mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S2MU register
 */
//@{
#define HW_FMC_DATAW0S2MU_ADDR      (REGS_FMC_BASE + 0x224U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S2MU           (*(__IO hw_fmc_dataw0s2mu_t *) HW_FMC_DATAW0S2MU_ADDR)
#define HW_FMC_DATAW0S2MU_RD()      (HW_FMC_DATAW0S2MU.U)
#define HW_FMC_DATAW0S2MU_WR(v)     (HW_FMC_DATAW0S2MU.U = (v))
#define HW_FMC_DATAW0S2MU_SET(v)    (HW_FMC_DATAW0S2MU_WR(HW_FMC_DATAW0S2MU_RD() |  (v)))
#define HW_FMC_DATAW0S2MU_CLR(v)    (HW_FMC_DATAW0S2MU_WR(HW_FMC_DATAW0S2MU_RD() & ~(v)))
#define HW_FMC_DATAW0S2MU_TOG(v)    (HW_FMC_DATAW0S2MU_WR(HW_FMC_DATAW0S2MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S2MU bitfields
 */

/*! @name Register FMC_DATAW0S2MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S2MU_DATA      (0U)      //!< Bit position for FMC_DATAW0S2MU_DATA.
#define BM_FMC_DATAW0S2MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S2MU_DATA.
#define BS_FMC_DATAW0S2MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S2MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S2MU_DATA field.
#define BR_FMC_DATAW0S2MU_DATA()   (HW_FMC_DATAW0S2MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S2MU_DATA.
#define BF_FMC_DATAW0S2MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S2MU_DATA), uint32_t) & BM_FMC_DATAW0S2MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S2MU_DATA(v)   (HW_FMC_DATAW0S2MU_WR((HW_FMC_DATAW0S2MU_RD() & ~BM_FMC_DATAW0S2MU_DATA) | BF_FMC_DATAW0S2MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S2ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S2ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s2ml
{
    uint32_t U;
    struct _hw_fmc_dataw0s2ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw0s2ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S2ML register
 */
//@{
#define HW_FMC_DATAW0S2ML_ADDR      (REGS_FMC_BASE + 0x228U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S2ML           (*(__IO hw_fmc_dataw0s2ml_t *) HW_FMC_DATAW0S2ML_ADDR)
#define HW_FMC_DATAW0S2ML_RD()      (HW_FMC_DATAW0S2ML.U)
#define HW_FMC_DATAW0S2ML_WR(v)     (HW_FMC_DATAW0S2ML.U = (v))
#define HW_FMC_DATAW0S2ML_SET(v)    (HW_FMC_DATAW0S2ML_WR(HW_FMC_DATAW0S2ML_RD() |  (v)))
#define HW_FMC_DATAW0S2ML_CLR(v)    (HW_FMC_DATAW0S2ML_WR(HW_FMC_DATAW0S2ML_RD() & ~(v)))
#define HW_FMC_DATAW0S2ML_TOG(v)    (HW_FMC_DATAW0S2ML_WR(HW_FMC_DATAW0S2ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S2ML bitfields
 */

/*! @name Register FMC_DATAW0S2ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S2ML_DATA      (0U)      //!< Bit position for FMC_DATAW0S2ML_DATA.
#define BM_FMC_DATAW0S2ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S2ML_DATA.
#define BS_FMC_DATAW0S2ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S2ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S2ML_DATA field.
#define BR_FMC_DATAW0S2ML_DATA()   (HW_FMC_DATAW0S2ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S2ML_DATA.
#define BF_FMC_DATAW0S2ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S2ML_DATA), uint32_t) & BM_FMC_DATAW0S2ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S2ML_DATA(v)   (HW_FMC_DATAW0S2ML_WR((HW_FMC_DATAW0S2ML_RD() & ~BM_FMC_DATAW0S2ML_DATA) | BF_FMC_DATAW0S2ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S2LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S2LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s2lm
{
    uint32_t U;
    struct _hw_fmc_dataw0s2lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw0s2lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S2LM register
 */
//@{
#define HW_FMC_DATAW0S2LM_ADDR      (REGS_FMC_BASE + 0x22cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S2LM           (*(__IO hw_fmc_dataw0s2lm_t *) HW_FMC_DATAW0S2LM_ADDR)
#define HW_FMC_DATAW0S2LM_RD()      (HW_FMC_DATAW0S2LM.U)
#define HW_FMC_DATAW0S2LM_WR(v)     (HW_FMC_DATAW0S2LM.U = (v))
#define HW_FMC_DATAW0S2LM_SET(v)    (HW_FMC_DATAW0S2LM_WR(HW_FMC_DATAW0S2LM_RD() |  (v)))
#define HW_FMC_DATAW0S2LM_CLR(v)    (HW_FMC_DATAW0S2LM_WR(HW_FMC_DATAW0S2LM_RD() & ~(v)))
#define HW_FMC_DATAW0S2LM_TOG(v)    (HW_FMC_DATAW0S2LM_WR(HW_FMC_DATAW0S2LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S2LM bitfields
 */

/*! @name Register FMC_DATAW0S2LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S2LM_DATA      (0U)      //!< Bit position for FMC_DATAW0S2LM_DATA.
#define BM_FMC_DATAW0S2LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S2LM_DATA.
#define BS_FMC_DATAW0S2LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S2LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S2LM_DATA field.
#define BR_FMC_DATAW0S2LM_DATA()   (HW_FMC_DATAW0S2LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S2LM_DATA.
#define BF_FMC_DATAW0S2LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S2LM_DATA), uint32_t) & BM_FMC_DATAW0S2LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S2LM_DATA(v)   (HW_FMC_DATAW0S2LM_WR((HW_FMC_DATAW0S2LM_RD() & ~BM_FMC_DATAW0S2LM_DATA) | BF_FMC_DATAW0S2LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S3UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S3UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s3um
{
    uint32_t U;
    struct _hw_fmc_dataw0s3um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw0s3um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S3UM register
 */
//@{
#define HW_FMC_DATAW0S3UM_ADDR      (REGS_FMC_BASE + 0x230U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S3UM           (*(__IO hw_fmc_dataw0s3um_t *) HW_FMC_DATAW0S3UM_ADDR)
#define HW_FMC_DATAW0S3UM_RD()      (HW_FMC_DATAW0S3UM.U)
#define HW_FMC_DATAW0S3UM_WR(v)     (HW_FMC_DATAW0S3UM.U = (v))
#define HW_FMC_DATAW0S3UM_SET(v)    (HW_FMC_DATAW0S3UM_WR(HW_FMC_DATAW0S3UM_RD() |  (v)))
#define HW_FMC_DATAW0S3UM_CLR(v)    (HW_FMC_DATAW0S3UM_WR(HW_FMC_DATAW0S3UM_RD() & ~(v)))
#define HW_FMC_DATAW0S3UM_TOG(v)    (HW_FMC_DATAW0S3UM_WR(HW_FMC_DATAW0S3UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S3UM bitfields
 */

/*! @name Register FMC_DATAW0S3UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S3UM_DATA      (0U)      //!< Bit position for FMC_DATAW0S3UM_DATA.
#define BM_FMC_DATAW0S3UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S3UM_DATA.
#define BS_FMC_DATAW0S3UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S3UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S3UM_DATA field.
#define BR_FMC_DATAW0S3UM_DATA()   (HW_FMC_DATAW0S3UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S3UM_DATA.
#define BF_FMC_DATAW0S3UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S3UM_DATA), uint32_t) & BM_FMC_DATAW0S3UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S3UM_DATA(v)   (HW_FMC_DATAW0S3UM_WR((HW_FMC_DATAW0S3UM_RD() & ~BM_FMC_DATAW0S3UM_DATA) | BF_FMC_DATAW0S3UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S3MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S3MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s3mu
{
    uint32_t U;
    struct _hw_fmc_dataw0s3mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw0s3mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S3MU register
 */
//@{
#define HW_FMC_DATAW0S3MU_ADDR      (REGS_FMC_BASE + 0x234U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S3MU           (*(__IO hw_fmc_dataw0s3mu_t *) HW_FMC_DATAW0S3MU_ADDR)
#define HW_FMC_DATAW0S3MU_RD()      (HW_FMC_DATAW0S3MU.U)
#define HW_FMC_DATAW0S3MU_WR(v)     (HW_FMC_DATAW0S3MU.U = (v))
#define HW_FMC_DATAW0S3MU_SET(v)    (HW_FMC_DATAW0S3MU_WR(HW_FMC_DATAW0S3MU_RD() |  (v)))
#define HW_FMC_DATAW0S3MU_CLR(v)    (HW_FMC_DATAW0S3MU_WR(HW_FMC_DATAW0S3MU_RD() & ~(v)))
#define HW_FMC_DATAW0S3MU_TOG(v)    (HW_FMC_DATAW0S3MU_WR(HW_FMC_DATAW0S3MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S3MU bitfields
 */

/*! @name Register FMC_DATAW0S3MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S3MU_DATA      (0U)      //!< Bit position for FMC_DATAW0S3MU_DATA.
#define BM_FMC_DATAW0S3MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S3MU_DATA.
#define BS_FMC_DATAW0S3MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S3MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S3MU_DATA field.
#define BR_FMC_DATAW0S3MU_DATA()   (HW_FMC_DATAW0S3MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S3MU_DATA.
#define BF_FMC_DATAW0S3MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S3MU_DATA), uint32_t) & BM_FMC_DATAW0S3MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S3MU_DATA(v)   (HW_FMC_DATAW0S3MU_WR((HW_FMC_DATAW0S3MU_RD() & ~BM_FMC_DATAW0S3MU_DATA) | BF_FMC_DATAW0S3MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S3ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S3ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s3ml
{
    uint32_t U;
    struct _hw_fmc_dataw0s3ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw0s3ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S3ML register
 */
//@{
#define HW_FMC_DATAW0S3ML_ADDR      (REGS_FMC_BASE + 0x238U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S3ML           (*(__IO hw_fmc_dataw0s3ml_t *) HW_FMC_DATAW0S3ML_ADDR)
#define HW_FMC_DATAW0S3ML_RD()      (HW_FMC_DATAW0S3ML.U)
#define HW_FMC_DATAW0S3ML_WR(v)     (HW_FMC_DATAW0S3ML.U = (v))
#define HW_FMC_DATAW0S3ML_SET(v)    (HW_FMC_DATAW0S3ML_WR(HW_FMC_DATAW0S3ML_RD() |  (v)))
#define HW_FMC_DATAW0S3ML_CLR(v)    (HW_FMC_DATAW0S3ML_WR(HW_FMC_DATAW0S3ML_RD() & ~(v)))
#define HW_FMC_DATAW0S3ML_TOG(v)    (HW_FMC_DATAW0S3ML_WR(HW_FMC_DATAW0S3ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S3ML bitfields
 */

/*! @name Register FMC_DATAW0S3ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S3ML_DATA      (0U)      //!< Bit position for FMC_DATAW0S3ML_DATA.
#define BM_FMC_DATAW0S3ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S3ML_DATA.
#define BS_FMC_DATAW0S3ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S3ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S3ML_DATA field.
#define BR_FMC_DATAW0S3ML_DATA()   (HW_FMC_DATAW0S3ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S3ML_DATA.
#define BF_FMC_DATAW0S3ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S3ML_DATA), uint32_t) & BM_FMC_DATAW0S3ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S3ML_DATA(v)   (HW_FMC_DATAW0S3ML_WR((HW_FMC_DATAW0S3ML_RD() & ~BM_FMC_DATAW0S3ML_DATA) | BF_FMC_DATAW0S3ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW0S3LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW0S3LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw0s3lm
{
    uint32_t U;
    struct _hw_fmc_dataw0s3lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw0s3lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW0S3LM register
 */
//@{
#define HW_FMC_DATAW0S3LM_ADDR      (REGS_FMC_BASE + 0x23cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW0S3LM           (*(__IO hw_fmc_dataw0s3lm_t *) HW_FMC_DATAW0S3LM_ADDR)
#define HW_FMC_DATAW0S3LM_RD()      (HW_FMC_DATAW0S3LM.U)
#define HW_FMC_DATAW0S3LM_WR(v)     (HW_FMC_DATAW0S3LM.U = (v))
#define HW_FMC_DATAW0S3LM_SET(v)    (HW_FMC_DATAW0S3LM_WR(HW_FMC_DATAW0S3LM_RD() |  (v)))
#define HW_FMC_DATAW0S3LM_CLR(v)    (HW_FMC_DATAW0S3LM_WR(HW_FMC_DATAW0S3LM_RD() & ~(v)))
#define HW_FMC_DATAW0S3LM_TOG(v)    (HW_FMC_DATAW0S3LM_WR(HW_FMC_DATAW0S3LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW0S3LM bitfields
 */

/*! @name Register FMC_DATAW0S3LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW0S3LM_DATA      (0U)      //!< Bit position for FMC_DATAW0S3LM_DATA.
#define BM_FMC_DATAW0S3LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW0S3LM_DATA.
#define BS_FMC_DATAW0S3LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW0S3LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW0S3LM_DATA field.
#define BR_FMC_DATAW0S3LM_DATA()   (HW_FMC_DATAW0S3LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW0S3LM_DATA.
#define BF_FMC_DATAW0S3LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW0S3LM_DATA), uint32_t) & BM_FMC_DATAW0S3LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW0S3LM_DATA(v)   (HW_FMC_DATAW0S3LM_WR((HW_FMC_DATAW0S3LM_RD() & ~BM_FMC_DATAW0S3LM_DATA) | BF_FMC_DATAW0S3LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S0UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S0UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s0um
{
    uint32_t U;
    struct _hw_fmc_dataw1s0um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw1s0um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S0UM register
 */
//@{
#define HW_FMC_DATAW1S0UM_ADDR      (REGS_FMC_BASE + 0x240U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S0UM           (*(__IO hw_fmc_dataw1s0um_t *) HW_FMC_DATAW1S0UM_ADDR)
#define HW_FMC_DATAW1S0UM_RD()      (HW_FMC_DATAW1S0UM.U)
#define HW_FMC_DATAW1S0UM_WR(v)     (HW_FMC_DATAW1S0UM.U = (v))
#define HW_FMC_DATAW1S0UM_SET(v)    (HW_FMC_DATAW1S0UM_WR(HW_FMC_DATAW1S0UM_RD() |  (v)))
#define HW_FMC_DATAW1S0UM_CLR(v)    (HW_FMC_DATAW1S0UM_WR(HW_FMC_DATAW1S0UM_RD() & ~(v)))
#define HW_FMC_DATAW1S0UM_TOG(v)    (HW_FMC_DATAW1S0UM_WR(HW_FMC_DATAW1S0UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S0UM bitfields
 */

/*! @name Register FMC_DATAW1S0UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S0UM_DATA      (0U)      //!< Bit position for FMC_DATAW1S0UM_DATA.
#define BM_FMC_DATAW1S0UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S0UM_DATA.
#define BS_FMC_DATAW1S0UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S0UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S0UM_DATA field.
#define BR_FMC_DATAW1S0UM_DATA()   (HW_FMC_DATAW1S0UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S0UM_DATA.
#define BF_FMC_DATAW1S0UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S0UM_DATA), uint32_t) & BM_FMC_DATAW1S0UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S0UM_DATA(v)   (HW_FMC_DATAW1S0UM_WR((HW_FMC_DATAW1S0UM_RD() & ~BM_FMC_DATAW1S0UM_DATA) | BF_FMC_DATAW1S0UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S0MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S0MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s0mu
{
    uint32_t U;
    struct _hw_fmc_dataw1s0mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw1s0mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S0MU register
 */
//@{
#define HW_FMC_DATAW1S0MU_ADDR      (REGS_FMC_BASE + 0x244U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S0MU           (*(__IO hw_fmc_dataw1s0mu_t *) HW_FMC_DATAW1S0MU_ADDR)
#define HW_FMC_DATAW1S0MU_RD()      (HW_FMC_DATAW1S0MU.U)
#define HW_FMC_DATAW1S0MU_WR(v)     (HW_FMC_DATAW1S0MU.U = (v))
#define HW_FMC_DATAW1S0MU_SET(v)    (HW_FMC_DATAW1S0MU_WR(HW_FMC_DATAW1S0MU_RD() |  (v)))
#define HW_FMC_DATAW1S0MU_CLR(v)    (HW_FMC_DATAW1S0MU_WR(HW_FMC_DATAW1S0MU_RD() & ~(v)))
#define HW_FMC_DATAW1S0MU_TOG(v)    (HW_FMC_DATAW1S0MU_WR(HW_FMC_DATAW1S0MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S0MU bitfields
 */

/*! @name Register FMC_DATAW1S0MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S0MU_DATA      (0U)      //!< Bit position for FMC_DATAW1S0MU_DATA.
#define BM_FMC_DATAW1S0MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S0MU_DATA.
#define BS_FMC_DATAW1S0MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S0MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S0MU_DATA field.
#define BR_FMC_DATAW1S0MU_DATA()   (HW_FMC_DATAW1S0MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S0MU_DATA.
#define BF_FMC_DATAW1S0MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S0MU_DATA), uint32_t) & BM_FMC_DATAW1S0MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S0MU_DATA(v)   (HW_FMC_DATAW1S0MU_WR((HW_FMC_DATAW1S0MU_RD() & ~BM_FMC_DATAW1S0MU_DATA) | BF_FMC_DATAW1S0MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S0ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S0ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s0ml
{
    uint32_t U;
    struct _hw_fmc_dataw1s0ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw1s0ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S0ML register
 */
//@{
#define HW_FMC_DATAW1S0ML_ADDR      (REGS_FMC_BASE + 0x248U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S0ML           (*(__IO hw_fmc_dataw1s0ml_t *) HW_FMC_DATAW1S0ML_ADDR)
#define HW_FMC_DATAW1S0ML_RD()      (HW_FMC_DATAW1S0ML.U)
#define HW_FMC_DATAW1S0ML_WR(v)     (HW_FMC_DATAW1S0ML.U = (v))
#define HW_FMC_DATAW1S0ML_SET(v)    (HW_FMC_DATAW1S0ML_WR(HW_FMC_DATAW1S0ML_RD() |  (v)))
#define HW_FMC_DATAW1S0ML_CLR(v)    (HW_FMC_DATAW1S0ML_WR(HW_FMC_DATAW1S0ML_RD() & ~(v)))
#define HW_FMC_DATAW1S0ML_TOG(v)    (HW_FMC_DATAW1S0ML_WR(HW_FMC_DATAW1S0ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S0ML bitfields
 */

/*! @name Register FMC_DATAW1S0ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S0ML_DATA      (0U)      //!< Bit position for FMC_DATAW1S0ML_DATA.
#define BM_FMC_DATAW1S0ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S0ML_DATA.
#define BS_FMC_DATAW1S0ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S0ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S0ML_DATA field.
#define BR_FMC_DATAW1S0ML_DATA()   (HW_FMC_DATAW1S0ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S0ML_DATA.
#define BF_FMC_DATAW1S0ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S0ML_DATA), uint32_t) & BM_FMC_DATAW1S0ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S0ML_DATA(v)   (HW_FMC_DATAW1S0ML_WR((HW_FMC_DATAW1S0ML_RD() & ~BM_FMC_DATAW1S0ML_DATA) | BF_FMC_DATAW1S0ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S0LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S0LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s0lm
{
    uint32_t U;
    struct _hw_fmc_dataw1s0lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw1s0lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S0LM register
 */
//@{
#define HW_FMC_DATAW1S0LM_ADDR      (REGS_FMC_BASE + 0x24cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S0LM           (*(__IO hw_fmc_dataw1s0lm_t *) HW_FMC_DATAW1S0LM_ADDR)
#define HW_FMC_DATAW1S0LM_RD()      (HW_FMC_DATAW1S0LM.U)
#define HW_FMC_DATAW1S0LM_WR(v)     (HW_FMC_DATAW1S0LM.U = (v))
#define HW_FMC_DATAW1S0LM_SET(v)    (HW_FMC_DATAW1S0LM_WR(HW_FMC_DATAW1S0LM_RD() |  (v)))
#define HW_FMC_DATAW1S0LM_CLR(v)    (HW_FMC_DATAW1S0LM_WR(HW_FMC_DATAW1S0LM_RD() & ~(v)))
#define HW_FMC_DATAW1S0LM_TOG(v)    (HW_FMC_DATAW1S0LM_WR(HW_FMC_DATAW1S0LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S0LM bitfields
 */

/*! @name Register FMC_DATAW1S0LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S0LM_DATA      (0U)      //!< Bit position for FMC_DATAW1S0LM_DATA.
#define BM_FMC_DATAW1S0LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S0LM_DATA.
#define BS_FMC_DATAW1S0LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S0LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S0LM_DATA field.
#define BR_FMC_DATAW1S0LM_DATA()   (HW_FMC_DATAW1S0LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S0LM_DATA.
#define BF_FMC_DATAW1S0LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S0LM_DATA), uint32_t) & BM_FMC_DATAW1S0LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S0LM_DATA(v)   (HW_FMC_DATAW1S0LM_WR((HW_FMC_DATAW1S0LM_RD() & ~BM_FMC_DATAW1S0LM_DATA) | BF_FMC_DATAW1S0LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S1UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S1UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s1um
{
    uint32_t U;
    struct _hw_fmc_dataw1s1um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw1s1um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S1UM register
 */
//@{
#define HW_FMC_DATAW1S1UM_ADDR      (REGS_FMC_BASE + 0x250U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S1UM           (*(__IO hw_fmc_dataw1s1um_t *) HW_FMC_DATAW1S1UM_ADDR)
#define HW_FMC_DATAW1S1UM_RD()      (HW_FMC_DATAW1S1UM.U)
#define HW_FMC_DATAW1S1UM_WR(v)     (HW_FMC_DATAW1S1UM.U = (v))
#define HW_FMC_DATAW1S1UM_SET(v)    (HW_FMC_DATAW1S1UM_WR(HW_FMC_DATAW1S1UM_RD() |  (v)))
#define HW_FMC_DATAW1S1UM_CLR(v)    (HW_FMC_DATAW1S1UM_WR(HW_FMC_DATAW1S1UM_RD() & ~(v)))
#define HW_FMC_DATAW1S1UM_TOG(v)    (HW_FMC_DATAW1S1UM_WR(HW_FMC_DATAW1S1UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S1UM bitfields
 */

/*! @name Register FMC_DATAW1S1UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S1UM_DATA      (0U)      //!< Bit position for FMC_DATAW1S1UM_DATA.
#define BM_FMC_DATAW1S1UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S1UM_DATA.
#define BS_FMC_DATAW1S1UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S1UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S1UM_DATA field.
#define BR_FMC_DATAW1S1UM_DATA()   (HW_FMC_DATAW1S1UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S1UM_DATA.
#define BF_FMC_DATAW1S1UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S1UM_DATA), uint32_t) & BM_FMC_DATAW1S1UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S1UM_DATA(v)   (HW_FMC_DATAW1S1UM_WR((HW_FMC_DATAW1S1UM_RD() & ~BM_FMC_DATAW1S1UM_DATA) | BF_FMC_DATAW1S1UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S1MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S1MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s1mu
{
    uint32_t U;
    struct _hw_fmc_dataw1s1mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw1s1mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S1MU register
 */
//@{
#define HW_FMC_DATAW1S1MU_ADDR      (REGS_FMC_BASE + 0x254U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S1MU           (*(__IO hw_fmc_dataw1s1mu_t *) HW_FMC_DATAW1S1MU_ADDR)
#define HW_FMC_DATAW1S1MU_RD()      (HW_FMC_DATAW1S1MU.U)
#define HW_FMC_DATAW1S1MU_WR(v)     (HW_FMC_DATAW1S1MU.U = (v))
#define HW_FMC_DATAW1S1MU_SET(v)    (HW_FMC_DATAW1S1MU_WR(HW_FMC_DATAW1S1MU_RD() |  (v)))
#define HW_FMC_DATAW1S1MU_CLR(v)    (HW_FMC_DATAW1S1MU_WR(HW_FMC_DATAW1S1MU_RD() & ~(v)))
#define HW_FMC_DATAW1S1MU_TOG(v)    (HW_FMC_DATAW1S1MU_WR(HW_FMC_DATAW1S1MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S1MU bitfields
 */

/*! @name Register FMC_DATAW1S1MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S1MU_DATA      (0U)      //!< Bit position for FMC_DATAW1S1MU_DATA.
#define BM_FMC_DATAW1S1MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S1MU_DATA.
#define BS_FMC_DATAW1S1MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S1MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S1MU_DATA field.
#define BR_FMC_DATAW1S1MU_DATA()   (HW_FMC_DATAW1S1MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S1MU_DATA.
#define BF_FMC_DATAW1S1MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S1MU_DATA), uint32_t) & BM_FMC_DATAW1S1MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S1MU_DATA(v)   (HW_FMC_DATAW1S1MU_WR((HW_FMC_DATAW1S1MU_RD() & ~BM_FMC_DATAW1S1MU_DATA) | BF_FMC_DATAW1S1MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S1ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S1ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s1ml
{
    uint32_t U;
    struct _hw_fmc_dataw1s1ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw1s1ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S1ML register
 */
//@{
#define HW_FMC_DATAW1S1ML_ADDR      (REGS_FMC_BASE + 0x258U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S1ML           (*(__IO hw_fmc_dataw1s1ml_t *) HW_FMC_DATAW1S1ML_ADDR)
#define HW_FMC_DATAW1S1ML_RD()      (HW_FMC_DATAW1S1ML.U)
#define HW_FMC_DATAW1S1ML_WR(v)     (HW_FMC_DATAW1S1ML.U = (v))
#define HW_FMC_DATAW1S1ML_SET(v)    (HW_FMC_DATAW1S1ML_WR(HW_FMC_DATAW1S1ML_RD() |  (v)))
#define HW_FMC_DATAW1S1ML_CLR(v)    (HW_FMC_DATAW1S1ML_WR(HW_FMC_DATAW1S1ML_RD() & ~(v)))
#define HW_FMC_DATAW1S1ML_TOG(v)    (HW_FMC_DATAW1S1ML_WR(HW_FMC_DATAW1S1ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S1ML bitfields
 */

/*! @name Register FMC_DATAW1S1ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S1ML_DATA      (0U)      //!< Bit position for FMC_DATAW1S1ML_DATA.
#define BM_FMC_DATAW1S1ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S1ML_DATA.
#define BS_FMC_DATAW1S1ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S1ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S1ML_DATA field.
#define BR_FMC_DATAW1S1ML_DATA()   (HW_FMC_DATAW1S1ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S1ML_DATA.
#define BF_FMC_DATAW1S1ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S1ML_DATA), uint32_t) & BM_FMC_DATAW1S1ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S1ML_DATA(v)   (HW_FMC_DATAW1S1ML_WR((HW_FMC_DATAW1S1ML_RD() & ~BM_FMC_DATAW1S1ML_DATA) | BF_FMC_DATAW1S1ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S1LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S1LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s1lm
{
    uint32_t U;
    struct _hw_fmc_dataw1s1lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw1s1lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S1LM register
 */
//@{
#define HW_FMC_DATAW1S1LM_ADDR      (REGS_FMC_BASE + 0x25cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S1LM           (*(__IO hw_fmc_dataw1s1lm_t *) HW_FMC_DATAW1S1LM_ADDR)
#define HW_FMC_DATAW1S1LM_RD()      (HW_FMC_DATAW1S1LM.U)
#define HW_FMC_DATAW1S1LM_WR(v)     (HW_FMC_DATAW1S1LM.U = (v))
#define HW_FMC_DATAW1S1LM_SET(v)    (HW_FMC_DATAW1S1LM_WR(HW_FMC_DATAW1S1LM_RD() |  (v)))
#define HW_FMC_DATAW1S1LM_CLR(v)    (HW_FMC_DATAW1S1LM_WR(HW_FMC_DATAW1S1LM_RD() & ~(v)))
#define HW_FMC_DATAW1S1LM_TOG(v)    (HW_FMC_DATAW1S1LM_WR(HW_FMC_DATAW1S1LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S1LM bitfields
 */

/*! @name Register FMC_DATAW1S1LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S1LM_DATA      (0U)      //!< Bit position for FMC_DATAW1S1LM_DATA.
#define BM_FMC_DATAW1S1LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S1LM_DATA.
#define BS_FMC_DATAW1S1LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S1LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S1LM_DATA field.
#define BR_FMC_DATAW1S1LM_DATA()   (HW_FMC_DATAW1S1LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S1LM_DATA.
#define BF_FMC_DATAW1S1LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S1LM_DATA), uint32_t) & BM_FMC_DATAW1S1LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S1LM_DATA(v)   (HW_FMC_DATAW1S1LM_WR((HW_FMC_DATAW1S1LM_RD() & ~BM_FMC_DATAW1S1LM_DATA) | BF_FMC_DATAW1S1LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S2UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S2UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s2um
{
    uint32_t U;
    struct _hw_fmc_dataw1s2um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw1s2um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S2UM register
 */
//@{
#define HW_FMC_DATAW1S2UM_ADDR      (REGS_FMC_BASE + 0x260U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S2UM           (*(__IO hw_fmc_dataw1s2um_t *) HW_FMC_DATAW1S2UM_ADDR)
#define HW_FMC_DATAW1S2UM_RD()      (HW_FMC_DATAW1S2UM.U)
#define HW_FMC_DATAW1S2UM_WR(v)     (HW_FMC_DATAW1S2UM.U = (v))
#define HW_FMC_DATAW1S2UM_SET(v)    (HW_FMC_DATAW1S2UM_WR(HW_FMC_DATAW1S2UM_RD() |  (v)))
#define HW_FMC_DATAW1S2UM_CLR(v)    (HW_FMC_DATAW1S2UM_WR(HW_FMC_DATAW1S2UM_RD() & ~(v)))
#define HW_FMC_DATAW1S2UM_TOG(v)    (HW_FMC_DATAW1S2UM_WR(HW_FMC_DATAW1S2UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S2UM bitfields
 */

/*! @name Register FMC_DATAW1S2UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S2UM_DATA      (0U)      //!< Bit position for FMC_DATAW1S2UM_DATA.
#define BM_FMC_DATAW1S2UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S2UM_DATA.
#define BS_FMC_DATAW1S2UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S2UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S2UM_DATA field.
#define BR_FMC_DATAW1S2UM_DATA()   (HW_FMC_DATAW1S2UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S2UM_DATA.
#define BF_FMC_DATAW1S2UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S2UM_DATA), uint32_t) & BM_FMC_DATAW1S2UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S2UM_DATA(v)   (HW_FMC_DATAW1S2UM_WR((HW_FMC_DATAW1S2UM_RD() & ~BM_FMC_DATAW1S2UM_DATA) | BF_FMC_DATAW1S2UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S2MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S2MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s2mu
{
    uint32_t U;
    struct _hw_fmc_dataw1s2mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw1s2mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S2MU register
 */
//@{
#define HW_FMC_DATAW1S2MU_ADDR      (REGS_FMC_BASE + 0x264U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S2MU           (*(__IO hw_fmc_dataw1s2mu_t *) HW_FMC_DATAW1S2MU_ADDR)
#define HW_FMC_DATAW1S2MU_RD()      (HW_FMC_DATAW1S2MU.U)
#define HW_FMC_DATAW1S2MU_WR(v)     (HW_FMC_DATAW1S2MU.U = (v))
#define HW_FMC_DATAW1S2MU_SET(v)    (HW_FMC_DATAW1S2MU_WR(HW_FMC_DATAW1S2MU_RD() |  (v)))
#define HW_FMC_DATAW1S2MU_CLR(v)    (HW_FMC_DATAW1S2MU_WR(HW_FMC_DATAW1S2MU_RD() & ~(v)))
#define HW_FMC_DATAW1S2MU_TOG(v)    (HW_FMC_DATAW1S2MU_WR(HW_FMC_DATAW1S2MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S2MU bitfields
 */

/*! @name Register FMC_DATAW1S2MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S2MU_DATA      (0U)      //!< Bit position for FMC_DATAW1S2MU_DATA.
#define BM_FMC_DATAW1S2MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S2MU_DATA.
#define BS_FMC_DATAW1S2MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S2MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S2MU_DATA field.
#define BR_FMC_DATAW1S2MU_DATA()   (HW_FMC_DATAW1S2MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S2MU_DATA.
#define BF_FMC_DATAW1S2MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S2MU_DATA), uint32_t) & BM_FMC_DATAW1S2MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S2MU_DATA(v)   (HW_FMC_DATAW1S2MU_WR((HW_FMC_DATAW1S2MU_RD() & ~BM_FMC_DATAW1S2MU_DATA) | BF_FMC_DATAW1S2MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S2ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S2ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s2ml
{
    uint32_t U;
    struct _hw_fmc_dataw1s2ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw1s2ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S2ML register
 */
//@{
#define HW_FMC_DATAW1S2ML_ADDR      (REGS_FMC_BASE + 0x268U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S2ML           (*(__IO hw_fmc_dataw1s2ml_t *) HW_FMC_DATAW1S2ML_ADDR)
#define HW_FMC_DATAW1S2ML_RD()      (HW_FMC_DATAW1S2ML.U)
#define HW_FMC_DATAW1S2ML_WR(v)     (HW_FMC_DATAW1S2ML.U = (v))
#define HW_FMC_DATAW1S2ML_SET(v)    (HW_FMC_DATAW1S2ML_WR(HW_FMC_DATAW1S2ML_RD() |  (v)))
#define HW_FMC_DATAW1S2ML_CLR(v)    (HW_FMC_DATAW1S2ML_WR(HW_FMC_DATAW1S2ML_RD() & ~(v)))
#define HW_FMC_DATAW1S2ML_TOG(v)    (HW_FMC_DATAW1S2ML_WR(HW_FMC_DATAW1S2ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S2ML bitfields
 */

/*! @name Register FMC_DATAW1S2ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S2ML_DATA      (0U)      //!< Bit position for FMC_DATAW1S2ML_DATA.
#define BM_FMC_DATAW1S2ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S2ML_DATA.
#define BS_FMC_DATAW1S2ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S2ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S2ML_DATA field.
#define BR_FMC_DATAW1S2ML_DATA()   (HW_FMC_DATAW1S2ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S2ML_DATA.
#define BF_FMC_DATAW1S2ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S2ML_DATA), uint32_t) & BM_FMC_DATAW1S2ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S2ML_DATA(v)   (HW_FMC_DATAW1S2ML_WR((HW_FMC_DATAW1S2ML_RD() & ~BM_FMC_DATAW1S2ML_DATA) | BF_FMC_DATAW1S2ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S2LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S2LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s2lm
{
    uint32_t U;
    struct _hw_fmc_dataw1s2lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw1s2lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S2LM register
 */
//@{
#define HW_FMC_DATAW1S2LM_ADDR      (REGS_FMC_BASE + 0x26cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S2LM           (*(__IO hw_fmc_dataw1s2lm_t *) HW_FMC_DATAW1S2LM_ADDR)
#define HW_FMC_DATAW1S2LM_RD()      (HW_FMC_DATAW1S2LM.U)
#define HW_FMC_DATAW1S2LM_WR(v)     (HW_FMC_DATAW1S2LM.U = (v))
#define HW_FMC_DATAW1S2LM_SET(v)    (HW_FMC_DATAW1S2LM_WR(HW_FMC_DATAW1S2LM_RD() |  (v)))
#define HW_FMC_DATAW1S2LM_CLR(v)    (HW_FMC_DATAW1S2LM_WR(HW_FMC_DATAW1S2LM_RD() & ~(v)))
#define HW_FMC_DATAW1S2LM_TOG(v)    (HW_FMC_DATAW1S2LM_WR(HW_FMC_DATAW1S2LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S2LM bitfields
 */

/*! @name Register FMC_DATAW1S2LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S2LM_DATA      (0U)      //!< Bit position for FMC_DATAW1S2LM_DATA.
#define BM_FMC_DATAW1S2LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S2LM_DATA.
#define BS_FMC_DATAW1S2LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S2LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S2LM_DATA field.
#define BR_FMC_DATAW1S2LM_DATA()   (HW_FMC_DATAW1S2LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S2LM_DATA.
#define BF_FMC_DATAW1S2LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S2LM_DATA), uint32_t) & BM_FMC_DATAW1S2LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S2LM_DATA(v)   (HW_FMC_DATAW1S2LM_WR((HW_FMC_DATAW1S2LM_RD() & ~BM_FMC_DATAW1S2LM_DATA) | BF_FMC_DATAW1S2LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S3UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S3UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s3um
{
    uint32_t U;
    struct _hw_fmc_dataw1s3um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw1s3um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S3UM register
 */
//@{
#define HW_FMC_DATAW1S3UM_ADDR      (REGS_FMC_BASE + 0x270U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S3UM           (*(__IO hw_fmc_dataw1s3um_t *) HW_FMC_DATAW1S3UM_ADDR)
#define HW_FMC_DATAW1S3UM_RD()      (HW_FMC_DATAW1S3UM.U)
#define HW_FMC_DATAW1S3UM_WR(v)     (HW_FMC_DATAW1S3UM.U = (v))
#define HW_FMC_DATAW1S3UM_SET(v)    (HW_FMC_DATAW1S3UM_WR(HW_FMC_DATAW1S3UM_RD() |  (v)))
#define HW_FMC_DATAW1S3UM_CLR(v)    (HW_FMC_DATAW1S3UM_WR(HW_FMC_DATAW1S3UM_RD() & ~(v)))
#define HW_FMC_DATAW1S3UM_TOG(v)    (HW_FMC_DATAW1S3UM_WR(HW_FMC_DATAW1S3UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S3UM bitfields
 */

/*! @name Register FMC_DATAW1S3UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S3UM_DATA      (0U)      //!< Bit position for FMC_DATAW1S3UM_DATA.
#define BM_FMC_DATAW1S3UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S3UM_DATA.
#define BS_FMC_DATAW1S3UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S3UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S3UM_DATA field.
#define BR_FMC_DATAW1S3UM_DATA()   (HW_FMC_DATAW1S3UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S3UM_DATA.
#define BF_FMC_DATAW1S3UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S3UM_DATA), uint32_t) & BM_FMC_DATAW1S3UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S3UM_DATA(v)   (HW_FMC_DATAW1S3UM_WR((HW_FMC_DATAW1S3UM_RD() & ~BM_FMC_DATAW1S3UM_DATA) | BF_FMC_DATAW1S3UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S3MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S3MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s3mu
{
    uint32_t U;
    struct _hw_fmc_dataw1s3mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw1s3mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S3MU register
 */
//@{
#define HW_FMC_DATAW1S3MU_ADDR      (REGS_FMC_BASE + 0x274U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S3MU           (*(__IO hw_fmc_dataw1s3mu_t *) HW_FMC_DATAW1S3MU_ADDR)
#define HW_FMC_DATAW1S3MU_RD()      (HW_FMC_DATAW1S3MU.U)
#define HW_FMC_DATAW1S3MU_WR(v)     (HW_FMC_DATAW1S3MU.U = (v))
#define HW_FMC_DATAW1S3MU_SET(v)    (HW_FMC_DATAW1S3MU_WR(HW_FMC_DATAW1S3MU_RD() |  (v)))
#define HW_FMC_DATAW1S3MU_CLR(v)    (HW_FMC_DATAW1S3MU_WR(HW_FMC_DATAW1S3MU_RD() & ~(v)))
#define HW_FMC_DATAW1S3MU_TOG(v)    (HW_FMC_DATAW1S3MU_WR(HW_FMC_DATAW1S3MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S3MU bitfields
 */

/*! @name Register FMC_DATAW1S3MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S3MU_DATA      (0U)      //!< Bit position for FMC_DATAW1S3MU_DATA.
#define BM_FMC_DATAW1S3MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S3MU_DATA.
#define BS_FMC_DATAW1S3MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S3MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S3MU_DATA field.
#define BR_FMC_DATAW1S3MU_DATA()   (HW_FMC_DATAW1S3MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S3MU_DATA.
#define BF_FMC_DATAW1S3MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S3MU_DATA), uint32_t) & BM_FMC_DATAW1S3MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S3MU_DATA(v)   (HW_FMC_DATAW1S3MU_WR((HW_FMC_DATAW1S3MU_RD() & ~BM_FMC_DATAW1S3MU_DATA) | BF_FMC_DATAW1S3MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S3ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S3ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s3ml
{
    uint32_t U;
    struct _hw_fmc_dataw1s3ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw1s3ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S3ML register
 */
//@{
#define HW_FMC_DATAW1S3ML_ADDR      (REGS_FMC_BASE + 0x278U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S3ML           (*(__IO hw_fmc_dataw1s3ml_t *) HW_FMC_DATAW1S3ML_ADDR)
#define HW_FMC_DATAW1S3ML_RD()      (HW_FMC_DATAW1S3ML.U)
#define HW_FMC_DATAW1S3ML_WR(v)     (HW_FMC_DATAW1S3ML.U = (v))
#define HW_FMC_DATAW1S3ML_SET(v)    (HW_FMC_DATAW1S3ML_WR(HW_FMC_DATAW1S3ML_RD() |  (v)))
#define HW_FMC_DATAW1S3ML_CLR(v)    (HW_FMC_DATAW1S3ML_WR(HW_FMC_DATAW1S3ML_RD() & ~(v)))
#define HW_FMC_DATAW1S3ML_TOG(v)    (HW_FMC_DATAW1S3ML_WR(HW_FMC_DATAW1S3ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S3ML bitfields
 */

/*! @name Register FMC_DATAW1S3ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S3ML_DATA      (0U)      //!< Bit position for FMC_DATAW1S3ML_DATA.
#define BM_FMC_DATAW1S3ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S3ML_DATA.
#define BS_FMC_DATAW1S3ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S3ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S3ML_DATA field.
#define BR_FMC_DATAW1S3ML_DATA()   (HW_FMC_DATAW1S3ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S3ML_DATA.
#define BF_FMC_DATAW1S3ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S3ML_DATA), uint32_t) & BM_FMC_DATAW1S3ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S3ML_DATA(v)   (HW_FMC_DATAW1S3ML_WR((HW_FMC_DATAW1S3ML_RD() & ~BM_FMC_DATAW1S3ML_DATA) | BF_FMC_DATAW1S3ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW1S3LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW1S3LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw1s3lm
{
    uint32_t U;
    struct _hw_fmc_dataw1s3lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw1s3lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW1S3LM register
 */
//@{
#define HW_FMC_DATAW1S3LM_ADDR      (REGS_FMC_BASE + 0x27cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW1S3LM           (*(__IO hw_fmc_dataw1s3lm_t *) HW_FMC_DATAW1S3LM_ADDR)
#define HW_FMC_DATAW1S3LM_RD()      (HW_FMC_DATAW1S3LM.U)
#define HW_FMC_DATAW1S3LM_WR(v)     (HW_FMC_DATAW1S3LM.U = (v))
#define HW_FMC_DATAW1S3LM_SET(v)    (HW_FMC_DATAW1S3LM_WR(HW_FMC_DATAW1S3LM_RD() |  (v)))
#define HW_FMC_DATAW1S3LM_CLR(v)    (HW_FMC_DATAW1S3LM_WR(HW_FMC_DATAW1S3LM_RD() & ~(v)))
#define HW_FMC_DATAW1S3LM_TOG(v)    (HW_FMC_DATAW1S3LM_WR(HW_FMC_DATAW1S3LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW1S3LM bitfields
 */

/*! @name Register FMC_DATAW1S3LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW1S3LM_DATA      (0U)      //!< Bit position for FMC_DATAW1S3LM_DATA.
#define BM_FMC_DATAW1S3LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW1S3LM_DATA.
#define BS_FMC_DATAW1S3LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW1S3LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW1S3LM_DATA field.
#define BR_FMC_DATAW1S3LM_DATA()   (HW_FMC_DATAW1S3LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW1S3LM_DATA.
#define BF_FMC_DATAW1S3LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW1S3LM_DATA), uint32_t) & BM_FMC_DATAW1S3LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW1S3LM_DATA(v)   (HW_FMC_DATAW1S3LM_WR((HW_FMC_DATAW1S3LM_RD() & ~BM_FMC_DATAW1S3LM_DATA) | BF_FMC_DATAW1S3LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S0UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S0UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s0um
{
    uint32_t U;
    struct _hw_fmc_dataw2s0um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw2s0um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S0UM register
 */
//@{
#define HW_FMC_DATAW2S0UM_ADDR      (REGS_FMC_BASE + 0x280U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S0UM           (*(__IO hw_fmc_dataw2s0um_t *) HW_FMC_DATAW2S0UM_ADDR)
#define HW_FMC_DATAW2S0UM_RD()      (HW_FMC_DATAW2S0UM.U)
#define HW_FMC_DATAW2S0UM_WR(v)     (HW_FMC_DATAW2S0UM.U = (v))
#define HW_FMC_DATAW2S0UM_SET(v)    (HW_FMC_DATAW2S0UM_WR(HW_FMC_DATAW2S0UM_RD() |  (v)))
#define HW_FMC_DATAW2S0UM_CLR(v)    (HW_FMC_DATAW2S0UM_WR(HW_FMC_DATAW2S0UM_RD() & ~(v)))
#define HW_FMC_DATAW2S0UM_TOG(v)    (HW_FMC_DATAW2S0UM_WR(HW_FMC_DATAW2S0UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S0UM bitfields
 */

/*! @name Register FMC_DATAW2S0UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S0UM_DATA      (0U)      //!< Bit position for FMC_DATAW2S0UM_DATA.
#define BM_FMC_DATAW2S0UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S0UM_DATA.
#define BS_FMC_DATAW2S0UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S0UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S0UM_DATA field.
#define BR_FMC_DATAW2S0UM_DATA()   (HW_FMC_DATAW2S0UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S0UM_DATA.
#define BF_FMC_DATAW2S0UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S0UM_DATA), uint32_t) & BM_FMC_DATAW2S0UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S0UM_DATA(v)   (HW_FMC_DATAW2S0UM_WR((HW_FMC_DATAW2S0UM_RD() & ~BM_FMC_DATAW2S0UM_DATA) | BF_FMC_DATAW2S0UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S0MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S0MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s0mu
{
    uint32_t U;
    struct _hw_fmc_dataw2s0mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw2s0mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S0MU register
 */
//@{
#define HW_FMC_DATAW2S0MU_ADDR      (REGS_FMC_BASE + 0x284U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S0MU           (*(__IO hw_fmc_dataw2s0mu_t *) HW_FMC_DATAW2S0MU_ADDR)
#define HW_FMC_DATAW2S0MU_RD()      (HW_FMC_DATAW2S0MU.U)
#define HW_FMC_DATAW2S0MU_WR(v)     (HW_FMC_DATAW2S0MU.U = (v))
#define HW_FMC_DATAW2S0MU_SET(v)    (HW_FMC_DATAW2S0MU_WR(HW_FMC_DATAW2S0MU_RD() |  (v)))
#define HW_FMC_DATAW2S0MU_CLR(v)    (HW_FMC_DATAW2S0MU_WR(HW_FMC_DATAW2S0MU_RD() & ~(v)))
#define HW_FMC_DATAW2S0MU_TOG(v)    (HW_FMC_DATAW2S0MU_WR(HW_FMC_DATAW2S0MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S0MU bitfields
 */

/*! @name Register FMC_DATAW2S0MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S0MU_DATA      (0U)      //!< Bit position for FMC_DATAW2S0MU_DATA.
#define BM_FMC_DATAW2S0MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S0MU_DATA.
#define BS_FMC_DATAW2S0MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S0MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S0MU_DATA field.
#define BR_FMC_DATAW2S0MU_DATA()   (HW_FMC_DATAW2S0MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S0MU_DATA.
#define BF_FMC_DATAW2S0MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S0MU_DATA), uint32_t) & BM_FMC_DATAW2S0MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S0MU_DATA(v)   (HW_FMC_DATAW2S0MU_WR((HW_FMC_DATAW2S0MU_RD() & ~BM_FMC_DATAW2S0MU_DATA) | BF_FMC_DATAW2S0MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S0ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S0ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s0ml
{
    uint32_t U;
    struct _hw_fmc_dataw2s0ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw2s0ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S0ML register
 */
//@{
#define HW_FMC_DATAW2S0ML_ADDR      (REGS_FMC_BASE + 0x288U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S0ML           (*(__IO hw_fmc_dataw2s0ml_t *) HW_FMC_DATAW2S0ML_ADDR)
#define HW_FMC_DATAW2S0ML_RD()      (HW_FMC_DATAW2S0ML.U)
#define HW_FMC_DATAW2S0ML_WR(v)     (HW_FMC_DATAW2S0ML.U = (v))
#define HW_FMC_DATAW2S0ML_SET(v)    (HW_FMC_DATAW2S0ML_WR(HW_FMC_DATAW2S0ML_RD() |  (v)))
#define HW_FMC_DATAW2S0ML_CLR(v)    (HW_FMC_DATAW2S0ML_WR(HW_FMC_DATAW2S0ML_RD() & ~(v)))
#define HW_FMC_DATAW2S0ML_TOG(v)    (HW_FMC_DATAW2S0ML_WR(HW_FMC_DATAW2S0ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S0ML bitfields
 */

/*! @name Register FMC_DATAW2S0ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S0ML_DATA      (0U)      //!< Bit position for FMC_DATAW2S0ML_DATA.
#define BM_FMC_DATAW2S0ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S0ML_DATA.
#define BS_FMC_DATAW2S0ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S0ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S0ML_DATA field.
#define BR_FMC_DATAW2S0ML_DATA()   (HW_FMC_DATAW2S0ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S0ML_DATA.
#define BF_FMC_DATAW2S0ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S0ML_DATA), uint32_t) & BM_FMC_DATAW2S0ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S0ML_DATA(v)   (HW_FMC_DATAW2S0ML_WR((HW_FMC_DATAW2S0ML_RD() & ~BM_FMC_DATAW2S0ML_DATA) | BF_FMC_DATAW2S0ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S0LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S0LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s0lm
{
    uint32_t U;
    struct _hw_fmc_dataw2s0lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw2s0lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S0LM register
 */
//@{
#define HW_FMC_DATAW2S0LM_ADDR      (REGS_FMC_BASE + 0x28cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S0LM           (*(__IO hw_fmc_dataw2s0lm_t *) HW_FMC_DATAW2S0LM_ADDR)
#define HW_FMC_DATAW2S0LM_RD()      (HW_FMC_DATAW2S0LM.U)
#define HW_FMC_DATAW2S0LM_WR(v)     (HW_FMC_DATAW2S0LM.U = (v))
#define HW_FMC_DATAW2S0LM_SET(v)    (HW_FMC_DATAW2S0LM_WR(HW_FMC_DATAW2S0LM_RD() |  (v)))
#define HW_FMC_DATAW2S0LM_CLR(v)    (HW_FMC_DATAW2S0LM_WR(HW_FMC_DATAW2S0LM_RD() & ~(v)))
#define HW_FMC_DATAW2S0LM_TOG(v)    (HW_FMC_DATAW2S0LM_WR(HW_FMC_DATAW2S0LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S0LM bitfields
 */

/*! @name Register FMC_DATAW2S0LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S0LM_DATA      (0U)      //!< Bit position for FMC_DATAW2S0LM_DATA.
#define BM_FMC_DATAW2S0LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S0LM_DATA.
#define BS_FMC_DATAW2S0LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S0LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S0LM_DATA field.
#define BR_FMC_DATAW2S0LM_DATA()   (HW_FMC_DATAW2S0LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S0LM_DATA.
#define BF_FMC_DATAW2S0LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S0LM_DATA), uint32_t) & BM_FMC_DATAW2S0LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S0LM_DATA(v)   (HW_FMC_DATAW2S0LM_WR((HW_FMC_DATAW2S0LM_RD() & ~BM_FMC_DATAW2S0LM_DATA) | BF_FMC_DATAW2S0LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S1UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S1UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s1um
{
    uint32_t U;
    struct _hw_fmc_dataw2s1um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw2s1um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S1UM register
 */
//@{
#define HW_FMC_DATAW2S1UM_ADDR      (REGS_FMC_BASE + 0x290U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S1UM           (*(__IO hw_fmc_dataw2s1um_t *) HW_FMC_DATAW2S1UM_ADDR)
#define HW_FMC_DATAW2S1UM_RD()      (HW_FMC_DATAW2S1UM.U)
#define HW_FMC_DATAW2S1UM_WR(v)     (HW_FMC_DATAW2S1UM.U = (v))
#define HW_FMC_DATAW2S1UM_SET(v)    (HW_FMC_DATAW2S1UM_WR(HW_FMC_DATAW2S1UM_RD() |  (v)))
#define HW_FMC_DATAW2S1UM_CLR(v)    (HW_FMC_DATAW2S1UM_WR(HW_FMC_DATAW2S1UM_RD() & ~(v)))
#define HW_FMC_DATAW2S1UM_TOG(v)    (HW_FMC_DATAW2S1UM_WR(HW_FMC_DATAW2S1UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S1UM bitfields
 */

/*! @name Register FMC_DATAW2S1UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S1UM_DATA      (0U)      //!< Bit position for FMC_DATAW2S1UM_DATA.
#define BM_FMC_DATAW2S1UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S1UM_DATA.
#define BS_FMC_DATAW2S1UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S1UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S1UM_DATA field.
#define BR_FMC_DATAW2S1UM_DATA()   (HW_FMC_DATAW2S1UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S1UM_DATA.
#define BF_FMC_DATAW2S1UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S1UM_DATA), uint32_t) & BM_FMC_DATAW2S1UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S1UM_DATA(v)   (HW_FMC_DATAW2S1UM_WR((HW_FMC_DATAW2S1UM_RD() & ~BM_FMC_DATAW2S1UM_DATA) | BF_FMC_DATAW2S1UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S1MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S1MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s1mu
{
    uint32_t U;
    struct _hw_fmc_dataw2s1mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw2s1mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S1MU register
 */
//@{
#define HW_FMC_DATAW2S1MU_ADDR      (REGS_FMC_BASE + 0x294U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S1MU           (*(__IO hw_fmc_dataw2s1mu_t *) HW_FMC_DATAW2S1MU_ADDR)
#define HW_FMC_DATAW2S1MU_RD()      (HW_FMC_DATAW2S1MU.U)
#define HW_FMC_DATAW2S1MU_WR(v)     (HW_FMC_DATAW2S1MU.U = (v))
#define HW_FMC_DATAW2S1MU_SET(v)    (HW_FMC_DATAW2S1MU_WR(HW_FMC_DATAW2S1MU_RD() |  (v)))
#define HW_FMC_DATAW2S1MU_CLR(v)    (HW_FMC_DATAW2S1MU_WR(HW_FMC_DATAW2S1MU_RD() & ~(v)))
#define HW_FMC_DATAW2S1MU_TOG(v)    (HW_FMC_DATAW2S1MU_WR(HW_FMC_DATAW2S1MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S1MU bitfields
 */

/*! @name Register FMC_DATAW2S1MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S1MU_DATA      (0U)      //!< Bit position for FMC_DATAW2S1MU_DATA.
#define BM_FMC_DATAW2S1MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S1MU_DATA.
#define BS_FMC_DATAW2S1MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S1MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S1MU_DATA field.
#define BR_FMC_DATAW2S1MU_DATA()   (HW_FMC_DATAW2S1MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S1MU_DATA.
#define BF_FMC_DATAW2S1MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S1MU_DATA), uint32_t) & BM_FMC_DATAW2S1MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S1MU_DATA(v)   (HW_FMC_DATAW2S1MU_WR((HW_FMC_DATAW2S1MU_RD() & ~BM_FMC_DATAW2S1MU_DATA) | BF_FMC_DATAW2S1MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S1ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S1ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s1ml
{
    uint32_t U;
    struct _hw_fmc_dataw2s1ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw2s1ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S1ML register
 */
//@{
#define HW_FMC_DATAW2S1ML_ADDR      (REGS_FMC_BASE + 0x298U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S1ML           (*(__IO hw_fmc_dataw2s1ml_t *) HW_FMC_DATAW2S1ML_ADDR)
#define HW_FMC_DATAW2S1ML_RD()      (HW_FMC_DATAW2S1ML.U)
#define HW_FMC_DATAW2S1ML_WR(v)     (HW_FMC_DATAW2S1ML.U = (v))
#define HW_FMC_DATAW2S1ML_SET(v)    (HW_FMC_DATAW2S1ML_WR(HW_FMC_DATAW2S1ML_RD() |  (v)))
#define HW_FMC_DATAW2S1ML_CLR(v)    (HW_FMC_DATAW2S1ML_WR(HW_FMC_DATAW2S1ML_RD() & ~(v)))
#define HW_FMC_DATAW2S1ML_TOG(v)    (HW_FMC_DATAW2S1ML_WR(HW_FMC_DATAW2S1ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S1ML bitfields
 */

/*! @name Register FMC_DATAW2S1ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S1ML_DATA      (0U)      //!< Bit position for FMC_DATAW2S1ML_DATA.
#define BM_FMC_DATAW2S1ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S1ML_DATA.
#define BS_FMC_DATAW2S1ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S1ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S1ML_DATA field.
#define BR_FMC_DATAW2S1ML_DATA()   (HW_FMC_DATAW2S1ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S1ML_DATA.
#define BF_FMC_DATAW2S1ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S1ML_DATA), uint32_t) & BM_FMC_DATAW2S1ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S1ML_DATA(v)   (HW_FMC_DATAW2S1ML_WR((HW_FMC_DATAW2S1ML_RD() & ~BM_FMC_DATAW2S1ML_DATA) | BF_FMC_DATAW2S1ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S1LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S1LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s1lm
{
    uint32_t U;
    struct _hw_fmc_dataw2s1lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw2s1lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S1LM register
 */
//@{
#define HW_FMC_DATAW2S1LM_ADDR      (REGS_FMC_BASE + 0x29cU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S1LM           (*(__IO hw_fmc_dataw2s1lm_t *) HW_FMC_DATAW2S1LM_ADDR)
#define HW_FMC_DATAW2S1LM_RD()      (HW_FMC_DATAW2S1LM.U)
#define HW_FMC_DATAW2S1LM_WR(v)     (HW_FMC_DATAW2S1LM.U = (v))
#define HW_FMC_DATAW2S1LM_SET(v)    (HW_FMC_DATAW2S1LM_WR(HW_FMC_DATAW2S1LM_RD() |  (v)))
#define HW_FMC_DATAW2S1LM_CLR(v)    (HW_FMC_DATAW2S1LM_WR(HW_FMC_DATAW2S1LM_RD() & ~(v)))
#define HW_FMC_DATAW2S1LM_TOG(v)    (HW_FMC_DATAW2S1LM_WR(HW_FMC_DATAW2S1LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S1LM bitfields
 */

/*! @name Register FMC_DATAW2S1LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S1LM_DATA      (0U)      //!< Bit position for FMC_DATAW2S1LM_DATA.
#define BM_FMC_DATAW2S1LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S1LM_DATA.
#define BS_FMC_DATAW2S1LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S1LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S1LM_DATA field.
#define BR_FMC_DATAW2S1LM_DATA()   (HW_FMC_DATAW2S1LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S1LM_DATA.
#define BF_FMC_DATAW2S1LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S1LM_DATA), uint32_t) & BM_FMC_DATAW2S1LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S1LM_DATA(v)   (HW_FMC_DATAW2S1LM_WR((HW_FMC_DATAW2S1LM_RD() & ~BM_FMC_DATAW2S1LM_DATA) | BF_FMC_DATAW2S1LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S2UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S2UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s2um
{
    uint32_t U;
    struct _hw_fmc_dataw2s2um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw2s2um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S2UM register
 */
//@{
#define HW_FMC_DATAW2S2UM_ADDR      (REGS_FMC_BASE + 0x2a0U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S2UM           (*(__IO hw_fmc_dataw2s2um_t *) HW_FMC_DATAW2S2UM_ADDR)
#define HW_FMC_DATAW2S2UM_RD()      (HW_FMC_DATAW2S2UM.U)
#define HW_FMC_DATAW2S2UM_WR(v)     (HW_FMC_DATAW2S2UM.U = (v))
#define HW_FMC_DATAW2S2UM_SET(v)    (HW_FMC_DATAW2S2UM_WR(HW_FMC_DATAW2S2UM_RD() |  (v)))
#define HW_FMC_DATAW2S2UM_CLR(v)    (HW_FMC_DATAW2S2UM_WR(HW_FMC_DATAW2S2UM_RD() & ~(v)))
#define HW_FMC_DATAW2S2UM_TOG(v)    (HW_FMC_DATAW2S2UM_WR(HW_FMC_DATAW2S2UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S2UM bitfields
 */

/*! @name Register FMC_DATAW2S2UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S2UM_DATA      (0U)      //!< Bit position for FMC_DATAW2S2UM_DATA.
#define BM_FMC_DATAW2S2UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S2UM_DATA.
#define BS_FMC_DATAW2S2UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S2UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S2UM_DATA field.
#define BR_FMC_DATAW2S2UM_DATA()   (HW_FMC_DATAW2S2UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S2UM_DATA.
#define BF_FMC_DATAW2S2UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S2UM_DATA), uint32_t) & BM_FMC_DATAW2S2UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S2UM_DATA(v)   (HW_FMC_DATAW2S2UM_WR((HW_FMC_DATAW2S2UM_RD() & ~BM_FMC_DATAW2S2UM_DATA) | BF_FMC_DATAW2S2UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S2MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S2MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s2mu
{
    uint32_t U;
    struct _hw_fmc_dataw2s2mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw2s2mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S2MU register
 */
//@{
#define HW_FMC_DATAW2S2MU_ADDR      (REGS_FMC_BASE + 0x2a4U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S2MU           (*(__IO hw_fmc_dataw2s2mu_t *) HW_FMC_DATAW2S2MU_ADDR)
#define HW_FMC_DATAW2S2MU_RD()      (HW_FMC_DATAW2S2MU.U)
#define HW_FMC_DATAW2S2MU_WR(v)     (HW_FMC_DATAW2S2MU.U = (v))
#define HW_FMC_DATAW2S2MU_SET(v)    (HW_FMC_DATAW2S2MU_WR(HW_FMC_DATAW2S2MU_RD() |  (v)))
#define HW_FMC_DATAW2S2MU_CLR(v)    (HW_FMC_DATAW2S2MU_WR(HW_FMC_DATAW2S2MU_RD() & ~(v)))
#define HW_FMC_DATAW2S2MU_TOG(v)    (HW_FMC_DATAW2S2MU_WR(HW_FMC_DATAW2S2MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S2MU bitfields
 */

/*! @name Register FMC_DATAW2S2MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S2MU_DATA      (0U)      //!< Bit position for FMC_DATAW2S2MU_DATA.
#define BM_FMC_DATAW2S2MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S2MU_DATA.
#define BS_FMC_DATAW2S2MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S2MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S2MU_DATA field.
#define BR_FMC_DATAW2S2MU_DATA()   (HW_FMC_DATAW2S2MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S2MU_DATA.
#define BF_FMC_DATAW2S2MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S2MU_DATA), uint32_t) & BM_FMC_DATAW2S2MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S2MU_DATA(v)   (HW_FMC_DATAW2S2MU_WR((HW_FMC_DATAW2S2MU_RD() & ~BM_FMC_DATAW2S2MU_DATA) | BF_FMC_DATAW2S2MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S2ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S2ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s2ml
{
    uint32_t U;
    struct _hw_fmc_dataw2s2ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw2s2ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S2ML register
 */
//@{
#define HW_FMC_DATAW2S2ML_ADDR      (REGS_FMC_BASE + 0x2a8U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S2ML           (*(__IO hw_fmc_dataw2s2ml_t *) HW_FMC_DATAW2S2ML_ADDR)
#define HW_FMC_DATAW2S2ML_RD()      (HW_FMC_DATAW2S2ML.U)
#define HW_FMC_DATAW2S2ML_WR(v)     (HW_FMC_DATAW2S2ML.U = (v))
#define HW_FMC_DATAW2S2ML_SET(v)    (HW_FMC_DATAW2S2ML_WR(HW_FMC_DATAW2S2ML_RD() |  (v)))
#define HW_FMC_DATAW2S2ML_CLR(v)    (HW_FMC_DATAW2S2ML_WR(HW_FMC_DATAW2S2ML_RD() & ~(v)))
#define HW_FMC_DATAW2S2ML_TOG(v)    (HW_FMC_DATAW2S2ML_WR(HW_FMC_DATAW2S2ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S2ML bitfields
 */

/*! @name Register FMC_DATAW2S2ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S2ML_DATA      (0U)      //!< Bit position for FMC_DATAW2S2ML_DATA.
#define BM_FMC_DATAW2S2ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S2ML_DATA.
#define BS_FMC_DATAW2S2ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S2ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S2ML_DATA field.
#define BR_FMC_DATAW2S2ML_DATA()   (HW_FMC_DATAW2S2ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S2ML_DATA.
#define BF_FMC_DATAW2S2ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S2ML_DATA), uint32_t) & BM_FMC_DATAW2S2ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S2ML_DATA(v)   (HW_FMC_DATAW2S2ML_WR((HW_FMC_DATAW2S2ML_RD() & ~BM_FMC_DATAW2S2ML_DATA) | BF_FMC_DATAW2S2ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S2LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S2LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s2lm
{
    uint32_t U;
    struct _hw_fmc_dataw2s2lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw2s2lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S2LM register
 */
//@{
#define HW_FMC_DATAW2S2LM_ADDR      (REGS_FMC_BASE + 0x2acU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S2LM           (*(__IO hw_fmc_dataw2s2lm_t *) HW_FMC_DATAW2S2LM_ADDR)
#define HW_FMC_DATAW2S2LM_RD()      (HW_FMC_DATAW2S2LM.U)
#define HW_FMC_DATAW2S2LM_WR(v)     (HW_FMC_DATAW2S2LM.U = (v))
#define HW_FMC_DATAW2S2LM_SET(v)    (HW_FMC_DATAW2S2LM_WR(HW_FMC_DATAW2S2LM_RD() |  (v)))
#define HW_FMC_DATAW2S2LM_CLR(v)    (HW_FMC_DATAW2S2LM_WR(HW_FMC_DATAW2S2LM_RD() & ~(v)))
#define HW_FMC_DATAW2S2LM_TOG(v)    (HW_FMC_DATAW2S2LM_WR(HW_FMC_DATAW2S2LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S2LM bitfields
 */

/*! @name Register FMC_DATAW2S2LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S2LM_DATA      (0U)      //!< Bit position for FMC_DATAW2S2LM_DATA.
#define BM_FMC_DATAW2S2LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S2LM_DATA.
#define BS_FMC_DATAW2S2LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S2LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S2LM_DATA field.
#define BR_FMC_DATAW2S2LM_DATA()   (HW_FMC_DATAW2S2LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S2LM_DATA.
#define BF_FMC_DATAW2S2LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S2LM_DATA), uint32_t) & BM_FMC_DATAW2S2LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S2LM_DATA(v)   (HW_FMC_DATAW2S2LM_WR((HW_FMC_DATAW2S2LM_RD() & ~BM_FMC_DATAW2S2LM_DATA) | BF_FMC_DATAW2S2LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S3UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S3UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s3um
{
    uint32_t U;
    struct _hw_fmc_dataw2s3um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw2s3um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S3UM register
 */
//@{
#define HW_FMC_DATAW2S3UM_ADDR      (REGS_FMC_BASE + 0x2b0U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S3UM           (*(__IO hw_fmc_dataw2s3um_t *) HW_FMC_DATAW2S3UM_ADDR)
#define HW_FMC_DATAW2S3UM_RD()      (HW_FMC_DATAW2S3UM.U)
#define HW_FMC_DATAW2S3UM_WR(v)     (HW_FMC_DATAW2S3UM.U = (v))
#define HW_FMC_DATAW2S3UM_SET(v)    (HW_FMC_DATAW2S3UM_WR(HW_FMC_DATAW2S3UM_RD() |  (v)))
#define HW_FMC_DATAW2S3UM_CLR(v)    (HW_FMC_DATAW2S3UM_WR(HW_FMC_DATAW2S3UM_RD() & ~(v)))
#define HW_FMC_DATAW2S3UM_TOG(v)    (HW_FMC_DATAW2S3UM_WR(HW_FMC_DATAW2S3UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S3UM bitfields
 */

/*! @name Register FMC_DATAW2S3UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S3UM_DATA      (0U)      //!< Bit position for FMC_DATAW2S3UM_DATA.
#define BM_FMC_DATAW2S3UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S3UM_DATA.
#define BS_FMC_DATAW2S3UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S3UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S3UM_DATA field.
#define BR_FMC_DATAW2S3UM_DATA()   (HW_FMC_DATAW2S3UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S3UM_DATA.
#define BF_FMC_DATAW2S3UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S3UM_DATA), uint32_t) & BM_FMC_DATAW2S3UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S3UM_DATA(v)   (HW_FMC_DATAW2S3UM_WR((HW_FMC_DATAW2S3UM_RD() & ~BM_FMC_DATAW2S3UM_DATA) | BF_FMC_DATAW2S3UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S3MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S3MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s3mu
{
    uint32_t U;
    struct _hw_fmc_dataw2s3mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw2s3mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S3MU register
 */
//@{
#define HW_FMC_DATAW2S3MU_ADDR      (REGS_FMC_BASE + 0x2b4U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S3MU           (*(__IO hw_fmc_dataw2s3mu_t *) HW_FMC_DATAW2S3MU_ADDR)
#define HW_FMC_DATAW2S3MU_RD()      (HW_FMC_DATAW2S3MU.U)
#define HW_FMC_DATAW2S3MU_WR(v)     (HW_FMC_DATAW2S3MU.U = (v))
#define HW_FMC_DATAW2S3MU_SET(v)    (HW_FMC_DATAW2S3MU_WR(HW_FMC_DATAW2S3MU_RD() |  (v)))
#define HW_FMC_DATAW2S3MU_CLR(v)    (HW_FMC_DATAW2S3MU_WR(HW_FMC_DATAW2S3MU_RD() & ~(v)))
#define HW_FMC_DATAW2S3MU_TOG(v)    (HW_FMC_DATAW2S3MU_WR(HW_FMC_DATAW2S3MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S3MU bitfields
 */

/*! @name Register FMC_DATAW2S3MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S3MU_DATA      (0U)      //!< Bit position for FMC_DATAW2S3MU_DATA.
#define BM_FMC_DATAW2S3MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S3MU_DATA.
#define BS_FMC_DATAW2S3MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S3MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S3MU_DATA field.
#define BR_FMC_DATAW2S3MU_DATA()   (HW_FMC_DATAW2S3MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S3MU_DATA.
#define BF_FMC_DATAW2S3MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S3MU_DATA), uint32_t) & BM_FMC_DATAW2S3MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S3MU_DATA(v)   (HW_FMC_DATAW2S3MU_WR((HW_FMC_DATAW2S3MU_RD() & ~BM_FMC_DATAW2S3MU_DATA) | BF_FMC_DATAW2S3MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S3ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S3ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s3ml
{
    uint32_t U;
    struct _hw_fmc_dataw2s3ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw2s3ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S3ML register
 */
//@{
#define HW_FMC_DATAW2S3ML_ADDR      (REGS_FMC_BASE + 0x2b8U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S3ML           (*(__IO hw_fmc_dataw2s3ml_t *) HW_FMC_DATAW2S3ML_ADDR)
#define HW_FMC_DATAW2S3ML_RD()      (HW_FMC_DATAW2S3ML.U)
#define HW_FMC_DATAW2S3ML_WR(v)     (HW_FMC_DATAW2S3ML.U = (v))
#define HW_FMC_DATAW2S3ML_SET(v)    (HW_FMC_DATAW2S3ML_WR(HW_FMC_DATAW2S3ML_RD() |  (v)))
#define HW_FMC_DATAW2S3ML_CLR(v)    (HW_FMC_DATAW2S3ML_WR(HW_FMC_DATAW2S3ML_RD() & ~(v)))
#define HW_FMC_DATAW2S3ML_TOG(v)    (HW_FMC_DATAW2S3ML_WR(HW_FMC_DATAW2S3ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S3ML bitfields
 */

/*! @name Register FMC_DATAW2S3ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S3ML_DATA      (0U)      //!< Bit position for FMC_DATAW2S3ML_DATA.
#define BM_FMC_DATAW2S3ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S3ML_DATA.
#define BS_FMC_DATAW2S3ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S3ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S3ML_DATA field.
#define BR_FMC_DATAW2S3ML_DATA()   (HW_FMC_DATAW2S3ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S3ML_DATA.
#define BF_FMC_DATAW2S3ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S3ML_DATA), uint32_t) & BM_FMC_DATAW2S3ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S3ML_DATA(v)   (HW_FMC_DATAW2S3ML_WR((HW_FMC_DATAW2S3ML_RD() & ~BM_FMC_DATAW2S3ML_DATA) | BF_FMC_DATAW2S3ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW2S3LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW2S3LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw2s3lm
{
    uint32_t U;
    struct _hw_fmc_dataw2s3lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw2s3lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW2S3LM register
 */
//@{
#define HW_FMC_DATAW2S3LM_ADDR      (REGS_FMC_BASE + 0x2bcU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW2S3LM           (*(__IO hw_fmc_dataw2s3lm_t *) HW_FMC_DATAW2S3LM_ADDR)
#define HW_FMC_DATAW2S3LM_RD()      (HW_FMC_DATAW2S3LM.U)
#define HW_FMC_DATAW2S3LM_WR(v)     (HW_FMC_DATAW2S3LM.U = (v))
#define HW_FMC_DATAW2S3LM_SET(v)    (HW_FMC_DATAW2S3LM_WR(HW_FMC_DATAW2S3LM_RD() |  (v)))
#define HW_FMC_DATAW2S3LM_CLR(v)    (HW_FMC_DATAW2S3LM_WR(HW_FMC_DATAW2S3LM_RD() & ~(v)))
#define HW_FMC_DATAW2S3LM_TOG(v)    (HW_FMC_DATAW2S3LM_WR(HW_FMC_DATAW2S3LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW2S3LM bitfields
 */

/*! @name Register FMC_DATAW2S3LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW2S3LM_DATA      (0U)      //!< Bit position for FMC_DATAW2S3LM_DATA.
#define BM_FMC_DATAW2S3LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW2S3LM_DATA.
#define BS_FMC_DATAW2S3LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW2S3LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW2S3LM_DATA field.
#define BR_FMC_DATAW2S3LM_DATA()   (HW_FMC_DATAW2S3LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW2S3LM_DATA.
#define BF_FMC_DATAW2S3LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW2S3LM_DATA), uint32_t) & BM_FMC_DATAW2S3LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW2S3LM_DATA(v)   (HW_FMC_DATAW2S3LM_WR((HW_FMC_DATAW2S3LM_RD() & ~BM_FMC_DATAW2S3LM_DATA) | BF_FMC_DATAW2S3LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S0UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S0UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s0um
{
    uint32_t U;
    struct _hw_fmc_dataw3s0um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw3s0um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S0UM register
 */
//@{
#define HW_FMC_DATAW3S0UM_ADDR      (REGS_FMC_BASE + 0x2c0U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S0UM           (*(__IO hw_fmc_dataw3s0um_t *) HW_FMC_DATAW3S0UM_ADDR)
#define HW_FMC_DATAW3S0UM_RD()      (HW_FMC_DATAW3S0UM.U)
#define HW_FMC_DATAW3S0UM_WR(v)     (HW_FMC_DATAW3S0UM.U = (v))
#define HW_FMC_DATAW3S0UM_SET(v)    (HW_FMC_DATAW3S0UM_WR(HW_FMC_DATAW3S0UM_RD() |  (v)))
#define HW_FMC_DATAW3S0UM_CLR(v)    (HW_FMC_DATAW3S0UM_WR(HW_FMC_DATAW3S0UM_RD() & ~(v)))
#define HW_FMC_DATAW3S0UM_TOG(v)    (HW_FMC_DATAW3S0UM_WR(HW_FMC_DATAW3S0UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S0UM bitfields
 */

/*! @name Register FMC_DATAW3S0UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S0UM_DATA      (0U)      //!< Bit position for FMC_DATAW3S0UM_DATA.
#define BM_FMC_DATAW3S0UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S0UM_DATA.
#define BS_FMC_DATAW3S0UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S0UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S0UM_DATA field.
#define BR_FMC_DATAW3S0UM_DATA()   (HW_FMC_DATAW3S0UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S0UM_DATA.
#define BF_FMC_DATAW3S0UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S0UM_DATA), uint32_t) & BM_FMC_DATAW3S0UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S0UM_DATA(v)   (HW_FMC_DATAW3S0UM_WR((HW_FMC_DATAW3S0UM_RD() & ~BM_FMC_DATAW3S0UM_DATA) | BF_FMC_DATAW3S0UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S0MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S0MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s0mu
{
    uint32_t U;
    struct _hw_fmc_dataw3s0mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw3s0mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S0MU register
 */
//@{
#define HW_FMC_DATAW3S0MU_ADDR      (REGS_FMC_BASE + 0x2c4U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S0MU           (*(__IO hw_fmc_dataw3s0mu_t *) HW_FMC_DATAW3S0MU_ADDR)
#define HW_FMC_DATAW3S0MU_RD()      (HW_FMC_DATAW3S0MU.U)
#define HW_FMC_DATAW3S0MU_WR(v)     (HW_FMC_DATAW3S0MU.U = (v))
#define HW_FMC_DATAW3S0MU_SET(v)    (HW_FMC_DATAW3S0MU_WR(HW_FMC_DATAW3S0MU_RD() |  (v)))
#define HW_FMC_DATAW3S0MU_CLR(v)    (HW_FMC_DATAW3S0MU_WR(HW_FMC_DATAW3S0MU_RD() & ~(v)))
#define HW_FMC_DATAW3S0MU_TOG(v)    (HW_FMC_DATAW3S0MU_WR(HW_FMC_DATAW3S0MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S0MU bitfields
 */

/*! @name Register FMC_DATAW3S0MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S0MU_DATA      (0U)      //!< Bit position for FMC_DATAW3S0MU_DATA.
#define BM_FMC_DATAW3S0MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S0MU_DATA.
#define BS_FMC_DATAW3S0MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S0MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S0MU_DATA field.
#define BR_FMC_DATAW3S0MU_DATA()   (HW_FMC_DATAW3S0MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S0MU_DATA.
#define BF_FMC_DATAW3S0MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S0MU_DATA), uint32_t) & BM_FMC_DATAW3S0MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S0MU_DATA(v)   (HW_FMC_DATAW3S0MU_WR((HW_FMC_DATAW3S0MU_RD() & ~BM_FMC_DATAW3S0MU_DATA) | BF_FMC_DATAW3S0MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S0ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S0ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s0ml
{
    uint32_t U;
    struct _hw_fmc_dataw3s0ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw3s0ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S0ML register
 */
//@{
#define HW_FMC_DATAW3S0ML_ADDR      (REGS_FMC_BASE + 0x2c8U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S0ML           (*(__IO hw_fmc_dataw3s0ml_t *) HW_FMC_DATAW3S0ML_ADDR)
#define HW_FMC_DATAW3S0ML_RD()      (HW_FMC_DATAW3S0ML.U)
#define HW_FMC_DATAW3S0ML_WR(v)     (HW_FMC_DATAW3S0ML.U = (v))
#define HW_FMC_DATAW3S0ML_SET(v)    (HW_FMC_DATAW3S0ML_WR(HW_FMC_DATAW3S0ML_RD() |  (v)))
#define HW_FMC_DATAW3S0ML_CLR(v)    (HW_FMC_DATAW3S0ML_WR(HW_FMC_DATAW3S0ML_RD() & ~(v)))
#define HW_FMC_DATAW3S0ML_TOG(v)    (HW_FMC_DATAW3S0ML_WR(HW_FMC_DATAW3S0ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S0ML bitfields
 */

/*! @name Register FMC_DATAW3S0ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S0ML_DATA      (0U)      //!< Bit position for FMC_DATAW3S0ML_DATA.
#define BM_FMC_DATAW3S0ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S0ML_DATA.
#define BS_FMC_DATAW3S0ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S0ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S0ML_DATA field.
#define BR_FMC_DATAW3S0ML_DATA()   (HW_FMC_DATAW3S0ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S0ML_DATA.
#define BF_FMC_DATAW3S0ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S0ML_DATA), uint32_t) & BM_FMC_DATAW3S0ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S0ML_DATA(v)   (HW_FMC_DATAW3S0ML_WR((HW_FMC_DATAW3S0ML_RD() & ~BM_FMC_DATAW3S0ML_DATA) | BF_FMC_DATAW3S0ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S0LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S0LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s0lm
{
    uint32_t U;
    struct _hw_fmc_dataw3s0lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw3s0lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S0LM register
 */
//@{
#define HW_FMC_DATAW3S0LM_ADDR      (REGS_FMC_BASE + 0x2ccU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S0LM           (*(__IO hw_fmc_dataw3s0lm_t *) HW_FMC_DATAW3S0LM_ADDR)
#define HW_FMC_DATAW3S0LM_RD()      (HW_FMC_DATAW3S0LM.U)
#define HW_FMC_DATAW3S0LM_WR(v)     (HW_FMC_DATAW3S0LM.U = (v))
#define HW_FMC_DATAW3S0LM_SET(v)    (HW_FMC_DATAW3S0LM_WR(HW_FMC_DATAW3S0LM_RD() |  (v)))
#define HW_FMC_DATAW3S0LM_CLR(v)    (HW_FMC_DATAW3S0LM_WR(HW_FMC_DATAW3S0LM_RD() & ~(v)))
#define HW_FMC_DATAW3S0LM_TOG(v)    (HW_FMC_DATAW3S0LM_WR(HW_FMC_DATAW3S0LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S0LM bitfields
 */

/*! @name Register FMC_DATAW3S0LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S0LM_DATA      (0U)      //!< Bit position for FMC_DATAW3S0LM_DATA.
#define BM_FMC_DATAW3S0LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S0LM_DATA.
#define BS_FMC_DATAW3S0LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S0LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S0LM_DATA field.
#define BR_FMC_DATAW3S0LM_DATA()   (HW_FMC_DATAW3S0LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S0LM_DATA.
#define BF_FMC_DATAW3S0LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S0LM_DATA), uint32_t) & BM_FMC_DATAW3S0LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S0LM_DATA(v)   (HW_FMC_DATAW3S0LM_WR((HW_FMC_DATAW3S0LM_RD() & ~BM_FMC_DATAW3S0LM_DATA) | BF_FMC_DATAW3S0LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S1UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S1UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s1um
{
    uint32_t U;
    struct _hw_fmc_dataw3s1um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw3s1um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S1UM register
 */
//@{
#define HW_FMC_DATAW3S1UM_ADDR      (REGS_FMC_BASE + 0x2d0U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S1UM           (*(__IO hw_fmc_dataw3s1um_t *) HW_FMC_DATAW3S1UM_ADDR)
#define HW_FMC_DATAW3S1UM_RD()      (HW_FMC_DATAW3S1UM.U)
#define HW_FMC_DATAW3S1UM_WR(v)     (HW_FMC_DATAW3S1UM.U = (v))
#define HW_FMC_DATAW3S1UM_SET(v)    (HW_FMC_DATAW3S1UM_WR(HW_FMC_DATAW3S1UM_RD() |  (v)))
#define HW_FMC_DATAW3S1UM_CLR(v)    (HW_FMC_DATAW3S1UM_WR(HW_FMC_DATAW3S1UM_RD() & ~(v)))
#define HW_FMC_DATAW3S1UM_TOG(v)    (HW_FMC_DATAW3S1UM_WR(HW_FMC_DATAW3S1UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S1UM bitfields
 */

/*! @name Register FMC_DATAW3S1UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S1UM_DATA      (0U)      //!< Bit position for FMC_DATAW3S1UM_DATA.
#define BM_FMC_DATAW3S1UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S1UM_DATA.
#define BS_FMC_DATAW3S1UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S1UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S1UM_DATA field.
#define BR_FMC_DATAW3S1UM_DATA()   (HW_FMC_DATAW3S1UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S1UM_DATA.
#define BF_FMC_DATAW3S1UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S1UM_DATA), uint32_t) & BM_FMC_DATAW3S1UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S1UM_DATA(v)   (HW_FMC_DATAW3S1UM_WR((HW_FMC_DATAW3S1UM_RD() & ~BM_FMC_DATAW3S1UM_DATA) | BF_FMC_DATAW3S1UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S1MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S1MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s1mu
{
    uint32_t U;
    struct _hw_fmc_dataw3s1mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw3s1mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S1MU register
 */
//@{
#define HW_FMC_DATAW3S1MU_ADDR      (REGS_FMC_BASE + 0x2d4U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S1MU           (*(__IO hw_fmc_dataw3s1mu_t *) HW_FMC_DATAW3S1MU_ADDR)
#define HW_FMC_DATAW3S1MU_RD()      (HW_FMC_DATAW3S1MU.U)
#define HW_FMC_DATAW3S1MU_WR(v)     (HW_FMC_DATAW3S1MU.U = (v))
#define HW_FMC_DATAW3S1MU_SET(v)    (HW_FMC_DATAW3S1MU_WR(HW_FMC_DATAW3S1MU_RD() |  (v)))
#define HW_FMC_DATAW3S1MU_CLR(v)    (HW_FMC_DATAW3S1MU_WR(HW_FMC_DATAW3S1MU_RD() & ~(v)))
#define HW_FMC_DATAW3S1MU_TOG(v)    (HW_FMC_DATAW3S1MU_WR(HW_FMC_DATAW3S1MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S1MU bitfields
 */

/*! @name Register FMC_DATAW3S1MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S1MU_DATA      (0U)      //!< Bit position for FMC_DATAW3S1MU_DATA.
#define BM_FMC_DATAW3S1MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S1MU_DATA.
#define BS_FMC_DATAW3S1MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S1MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S1MU_DATA field.
#define BR_FMC_DATAW3S1MU_DATA()   (HW_FMC_DATAW3S1MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S1MU_DATA.
#define BF_FMC_DATAW3S1MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S1MU_DATA), uint32_t) & BM_FMC_DATAW3S1MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S1MU_DATA(v)   (HW_FMC_DATAW3S1MU_WR((HW_FMC_DATAW3S1MU_RD() & ~BM_FMC_DATAW3S1MU_DATA) | BF_FMC_DATAW3S1MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S1ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S1ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s1ml
{
    uint32_t U;
    struct _hw_fmc_dataw3s1ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw3s1ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S1ML register
 */
//@{
#define HW_FMC_DATAW3S1ML_ADDR      (REGS_FMC_BASE + 0x2d8U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S1ML           (*(__IO hw_fmc_dataw3s1ml_t *) HW_FMC_DATAW3S1ML_ADDR)
#define HW_FMC_DATAW3S1ML_RD()      (HW_FMC_DATAW3S1ML.U)
#define HW_FMC_DATAW3S1ML_WR(v)     (HW_FMC_DATAW3S1ML.U = (v))
#define HW_FMC_DATAW3S1ML_SET(v)    (HW_FMC_DATAW3S1ML_WR(HW_FMC_DATAW3S1ML_RD() |  (v)))
#define HW_FMC_DATAW3S1ML_CLR(v)    (HW_FMC_DATAW3S1ML_WR(HW_FMC_DATAW3S1ML_RD() & ~(v)))
#define HW_FMC_DATAW3S1ML_TOG(v)    (HW_FMC_DATAW3S1ML_WR(HW_FMC_DATAW3S1ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S1ML bitfields
 */

/*! @name Register FMC_DATAW3S1ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S1ML_DATA      (0U)      //!< Bit position for FMC_DATAW3S1ML_DATA.
#define BM_FMC_DATAW3S1ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S1ML_DATA.
#define BS_FMC_DATAW3S1ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S1ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S1ML_DATA field.
#define BR_FMC_DATAW3S1ML_DATA()   (HW_FMC_DATAW3S1ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S1ML_DATA.
#define BF_FMC_DATAW3S1ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S1ML_DATA), uint32_t) & BM_FMC_DATAW3S1ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S1ML_DATA(v)   (HW_FMC_DATAW3S1ML_WR((HW_FMC_DATAW3S1ML_RD() & ~BM_FMC_DATAW3S1ML_DATA) | BF_FMC_DATAW3S1ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S1LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S1LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s1lm
{
    uint32_t U;
    struct _hw_fmc_dataw3s1lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw3s1lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S1LM register
 */
//@{
#define HW_FMC_DATAW3S1LM_ADDR      (REGS_FMC_BASE + 0x2dcU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S1LM           (*(__IO hw_fmc_dataw3s1lm_t *) HW_FMC_DATAW3S1LM_ADDR)
#define HW_FMC_DATAW3S1LM_RD()      (HW_FMC_DATAW3S1LM.U)
#define HW_FMC_DATAW3S1LM_WR(v)     (HW_FMC_DATAW3S1LM.U = (v))
#define HW_FMC_DATAW3S1LM_SET(v)    (HW_FMC_DATAW3S1LM_WR(HW_FMC_DATAW3S1LM_RD() |  (v)))
#define HW_FMC_DATAW3S1LM_CLR(v)    (HW_FMC_DATAW3S1LM_WR(HW_FMC_DATAW3S1LM_RD() & ~(v)))
#define HW_FMC_DATAW3S1LM_TOG(v)    (HW_FMC_DATAW3S1LM_WR(HW_FMC_DATAW3S1LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S1LM bitfields
 */

/*! @name Register FMC_DATAW3S1LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S1LM_DATA      (0U)      //!< Bit position for FMC_DATAW3S1LM_DATA.
#define BM_FMC_DATAW3S1LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S1LM_DATA.
#define BS_FMC_DATAW3S1LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S1LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S1LM_DATA field.
#define BR_FMC_DATAW3S1LM_DATA()   (HW_FMC_DATAW3S1LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S1LM_DATA.
#define BF_FMC_DATAW3S1LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S1LM_DATA), uint32_t) & BM_FMC_DATAW3S1LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S1LM_DATA(v)   (HW_FMC_DATAW3S1LM_WR((HW_FMC_DATAW3S1LM_RD() & ~BM_FMC_DATAW3S1LM_DATA) | BF_FMC_DATAW3S1LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S2UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S2UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s2um
{
    uint32_t U;
    struct _hw_fmc_dataw3s2um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw3s2um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S2UM register
 */
//@{
#define HW_FMC_DATAW3S2UM_ADDR      (REGS_FMC_BASE + 0x2e0U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S2UM           (*(__IO hw_fmc_dataw3s2um_t *) HW_FMC_DATAW3S2UM_ADDR)
#define HW_FMC_DATAW3S2UM_RD()      (HW_FMC_DATAW3S2UM.U)
#define HW_FMC_DATAW3S2UM_WR(v)     (HW_FMC_DATAW3S2UM.U = (v))
#define HW_FMC_DATAW3S2UM_SET(v)    (HW_FMC_DATAW3S2UM_WR(HW_FMC_DATAW3S2UM_RD() |  (v)))
#define HW_FMC_DATAW3S2UM_CLR(v)    (HW_FMC_DATAW3S2UM_WR(HW_FMC_DATAW3S2UM_RD() & ~(v)))
#define HW_FMC_DATAW3S2UM_TOG(v)    (HW_FMC_DATAW3S2UM_WR(HW_FMC_DATAW3S2UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S2UM bitfields
 */

/*! @name Register FMC_DATAW3S2UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S2UM_DATA      (0U)      //!< Bit position for FMC_DATAW3S2UM_DATA.
#define BM_FMC_DATAW3S2UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S2UM_DATA.
#define BS_FMC_DATAW3S2UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S2UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S2UM_DATA field.
#define BR_FMC_DATAW3S2UM_DATA()   (HW_FMC_DATAW3S2UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S2UM_DATA.
#define BF_FMC_DATAW3S2UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S2UM_DATA), uint32_t) & BM_FMC_DATAW3S2UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S2UM_DATA(v)   (HW_FMC_DATAW3S2UM_WR((HW_FMC_DATAW3S2UM_RD() & ~BM_FMC_DATAW3S2UM_DATA) | BF_FMC_DATAW3S2UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S2MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S2MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s2mu
{
    uint32_t U;
    struct _hw_fmc_dataw3s2mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw3s2mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S2MU register
 */
//@{
#define HW_FMC_DATAW3S2MU_ADDR      (REGS_FMC_BASE + 0x2e4U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S2MU           (*(__IO hw_fmc_dataw3s2mu_t *) HW_FMC_DATAW3S2MU_ADDR)
#define HW_FMC_DATAW3S2MU_RD()      (HW_FMC_DATAW3S2MU.U)
#define HW_FMC_DATAW3S2MU_WR(v)     (HW_FMC_DATAW3S2MU.U = (v))
#define HW_FMC_DATAW3S2MU_SET(v)    (HW_FMC_DATAW3S2MU_WR(HW_FMC_DATAW3S2MU_RD() |  (v)))
#define HW_FMC_DATAW3S2MU_CLR(v)    (HW_FMC_DATAW3S2MU_WR(HW_FMC_DATAW3S2MU_RD() & ~(v)))
#define HW_FMC_DATAW3S2MU_TOG(v)    (HW_FMC_DATAW3S2MU_WR(HW_FMC_DATAW3S2MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S2MU bitfields
 */

/*! @name Register FMC_DATAW3S2MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S2MU_DATA      (0U)      //!< Bit position for FMC_DATAW3S2MU_DATA.
#define BM_FMC_DATAW3S2MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S2MU_DATA.
#define BS_FMC_DATAW3S2MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S2MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S2MU_DATA field.
#define BR_FMC_DATAW3S2MU_DATA()   (HW_FMC_DATAW3S2MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S2MU_DATA.
#define BF_FMC_DATAW3S2MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S2MU_DATA), uint32_t) & BM_FMC_DATAW3S2MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S2MU_DATA(v)   (HW_FMC_DATAW3S2MU_WR((HW_FMC_DATAW3S2MU_RD() & ~BM_FMC_DATAW3S2MU_DATA) | BF_FMC_DATAW3S2MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S2ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S2ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s2ml
{
    uint32_t U;
    struct _hw_fmc_dataw3s2ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw3s2ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S2ML register
 */
//@{
#define HW_FMC_DATAW3S2ML_ADDR      (REGS_FMC_BASE + 0x2e8U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S2ML           (*(__IO hw_fmc_dataw3s2ml_t *) HW_FMC_DATAW3S2ML_ADDR)
#define HW_FMC_DATAW3S2ML_RD()      (HW_FMC_DATAW3S2ML.U)
#define HW_FMC_DATAW3S2ML_WR(v)     (HW_FMC_DATAW3S2ML.U = (v))
#define HW_FMC_DATAW3S2ML_SET(v)    (HW_FMC_DATAW3S2ML_WR(HW_FMC_DATAW3S2ML_RD() |  (v)))
#define HW_FMC_DATAW3S2ML_CLR(v)    (HW_FMC_DATAW3S2ML_WR(HW_FMC_DATAW3S2ML_RD() & ~(v)))
#define HW_FMC_DATAW3S2ML_TOG(v)    (HW_FMC_DATAW3S2ML_WR(HW_FMC_DATAW3S2ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S2ML bitfields
 */

/*! @name Register FMC_DATAW3S2ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S2ML_DATA      (0U)      //!< Bit position for FMC_DATAW3S2ML_DATA.
#define BM_FMC_DATAW3S2ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S2ML_DATA.
#define BS_FMC_DATAW3S2ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S2ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S2ML_DATA field.
#define BR_FMC_DATAW3S2ML_DATA()   (HW_FMC_DATAW3S2ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S2ML_DATA.
#define BF_FMC_DATAW3S2ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S2ML_DATA), uint32_t) & BM_FMC_DATAW3S2ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S2ML_DATA(v)   (HW_FMC_DATAW3S2ML_WR((HW_FMC_DATAW3S2ML_RD() & ~BM_FMC_DATAW3S2ML_DATA) | BF_FMC_DATAW3S2ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S2LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S2LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s2lm
{
    uint32_t U;
    struct _hw_fmc_dataw3s2lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw3s2lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S2LM register
 */
//@{
#define HW_FMC_DATAW3S2LM_ADDR      (REGS_FMC_BASE + 0x2ecU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S2LM           (*(__IO hw_fmc_dataw3s2lm_t *) HW_FMC_DATAW3S2LM_ADDR)
#define HW_FMC_DATAW3S2LM_RD()      (HW_FMC_DATAW3S2LM.U)
#define HW_FMC_DATAW3S2LM_WR(v)     (HW_FMC_DATAW3S2LM.U = (v))
#define HW_FMC_DATAW3S2LM_SET(v)    (HW_FMC_DATAW3S2LM_WR(HW_FMC_DATAW3S2LM_RD() |  (v)))
#define HW_FMC_DATAW3S2LM_CLR(v)    (HW_FMC_DATAW3S2LM_WR(HW_FMC_DATAW3S2LM_RD() & ~(v)))
#define HW_FMC_DATAW3S2LM_TOG(v)    (HW_FMC_DATAW3S2LM_WR(HW_FMC_DATAW3S2LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S2LM bitfields
 */

/*! @name Register FMC_DATAW3S2LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S2LM_DATA      (0U)      //!< Bit position for FMC_DATAW3S2LM_DATA.
#define BM_FMC_DATAW3S2LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S2LM_DATA.
#define BS_FMC_DATAW3S2LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S2LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S2LM_DATA field.
#define BR_FMC_DATAW3S2LM_DATA()   (HW_FMC_DATAW3S2LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S2LM_DATA.
#define BF_FMC_DATAW3S2LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S2LM_DATA), uint32_t) & BM_FMC_DATAW3S2LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S2LM_DATA(v)   (HW_FMC_DATAW3S2LM_WR((HW_FMC_DATAW3S2LM_RD() & ~BM_FMC_DATAW3S2LM_DATA) | BF_FMC_DATAW3S2LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S3UM - Cache Data Storage (uppermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S3UM - Cache Data Storage (uppermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the uppermost word (bits [127:96]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s3um
{
    uint32_t U;
    struct _hw_fmc_dataw3s3um_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [127:96] of data entry
    } B;
} hw_fmc_dataw3s3um_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S3UM register
 */
//@{
#define HW_FMC_DATAW3S3UM_ADDR      (REGS_FMC_BASE + 0x2f0U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S3UM           (*(__IO hw_fmc_dataw3s3um_t *) HW_FMC_DATAW3S3UM_ADDR)
#define HW_FMC_DATAW3S3UM_RD()      (HW_FMC_DATAW3S3UM.U)
#define HW_FMC_DATAW3S3UM_WR(v)     (HW_FMC_DATAW3S3UM.U = (v))
#define HW_FMC_DATAW3S3UM_SET(v)    (HW_FMC_DATAW3S3UM_WR(HW_FMC_DATAW3S3UM_RD() |  (v)))
#define HW_FMC_DATAW3S3UM_CLR(v)    (HW_FMC_DATAW3S3UM_WR(HW_FMC_DATAW3S3UM_RD() & ~(v)))
#define HW_FMC_DATAW3S3UM_TOG(v)    (HW_FMC_DATAW3S3UM_WR(HW_FMC_DATAW3S3UM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S3UM bitfields
 */

/*! @name Register FMC_DATAW3S3UM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S3UM_DATA      (0U)      //!< Bit position for FMC_DATAW3S3UM_DATA.
#define BM_FMC_DATAW3S3UM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S3UM_DATA.
#define BS_FMC_DATAW3S3UM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S3UM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S3UM_DATA field.
#define BR_FMC_DATAW3S3UM_DATA()   (HW_FMC_DATAW3S3UM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S3UM_DATA.
#define BF_FMC_DATAW3S3UM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S3UM_DATA), uint32_t) & BM_FMC_DATAW3S3UM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S3UM_DATA(v)   (HW_FMC_DATAW3S3UM_WR((HW_FMC_DATAW3S3UM_RD() & ~BM_FMC_DATAW3S3UM_DATA) | BF_FMC_DATAW3S3UM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S3MU - Cache Data Storage (mid-upper word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S3MU - Cache Data Storage (mid-upper word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-upper word (bits [95:64]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s3mu
{
    uint32_t U;
    struct _hw_fmc_dataw3s3mu_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [95:64] of data entry
    } B;
} hw_fmc_dataw3s3mu_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S3MU register
 */
//@{
#define HW_FMC_DATAW3S3MU_ADDR      (REGS_FMC_BASE + 0x2f4U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S3MU           (*(__IO hw_fmc_dataw3s3mu_t *) HW_FMC_DATAW3S3MU_ADDR)
#define HW_FMC_DATAW3S3MU_RD()      (HW_FMC_DATAW3S3MU.U)
#define HW_FMC_DATAW3S3MU_WR(v)     (HW_FMC_DATAW3S3MU.U = (v))
#define HW_FMC_DATAW3S3MU_SET(v)    (HW_FMC_DATAW3S3MU_WR(HW_FMC_DATAW3S3MU_RD() |  (v)))
#define HW_FMC_DATAW3S3MU_CLR(v)    (HW_FMC_DATAW3S3MU_WR(HW_FMC_DATAW3S3MU_RD() & ~(v)))
#define HW_FMC_DATAW3S3MU_TOG(v)    (HW_FMC_DATAW3S3MU_WR(HW_FMC_DATAW3S3MU_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S3MU bitfields
 */

/*! @name Register FMC_DATAW3S3MU, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S3MU_DATA      (0U)      //!< Bit position for FMC_DATAW3S3MU_DATA.
#define BM_FMC_DATAW3S3MU_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S3MU_DATA.
#define BS_FMC_DATAW3S3MU_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S3MU_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S3MU_DATA field.
#define BR_FMC_DATAW3S3MU_DATA()   (HW_FMC_DATAW3S3MU.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S3MU_DATA.
#define BF_FMC_DATAW3S3MU_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S3MU_DATA), uint32_t) & BM_FMC_DATAW3S3MU_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S3MU_DATA(v)   (HW_FMC_DATAW3S3MU_WR((HW_FMC_DATAW3S3MU_RD() & ~BM_FMC_DATAW3S3MU_DATA) | BF_FMC_DATAW3S3MU_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S3ML - Cache Data Storage (mid-lower word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S3ML - Cache Data Storage (mid-lower word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the mid-lower word (bits [63:32]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s3ml
{
    uint32_t U;
    struct _hw_fmc_dataw3s3ml_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [63:32] of data entry
    } B;
} hw_fmc_dataw3s3ml_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S3ML register
 */
//@{
#define HW_FMC_DATAW3S3ML_ADDR      (REGS_FMC_BASE + 0x2f8U)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S3ML           (*(__IO hw_fmc_dataw3s3ml_t *) HW_FMC_DATAW3S3ML_ADDR)
#define HW_FMC_DATAW3S3ML_RD()      (HW_FMC_DATAW3S3ML.U)
#define HW_FMC_DATAW3S3ML_WR(v)     (HW_FMC_DATAW3S3ML.U = (v))
#define HW_FMC_DATAW3S3ML_SET(v)    (HW_FMC_DATAW3S3ML_WR(HW_FMC_DATAW3S3ML_RD() |  (v)))
#define HW_FMC_DATAW3S3ML_CLR(v)    (HW_FMC_DATAW3S3ML_WR(HW_FMC_DATAW3S3ML_RD() & ~(v)))
#define HW_FMC_DATAW3S3ML_TOG(v)    (HW_FMC_DATAW3S3ML_WR(HW_FMC_DATAW3S3ML_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S3ML bitfields
 */

/*! @name Register FMC_DATAW3S3ML, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S3ML_DATA      (0U)      //!< Bit position for FMC_DATAW3S3ML_DATA.
#define BM_FMC_DATAW3S3ML_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S3ML_DATA.
#define BS_FMC_DATAW3S3ML_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S3ML_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S3ML_DATA field.
#define BR_FMC_DATAW3S3ML_DATA()   (HW_FMC_DATAW3S3ML.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S3ML_DATA.
#define BF_FMC_DATAW3S3ML_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S3ML_DATA), uint32_t) & BM_FMC_DATAW3S3ML_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S3ML_DATA(v)   (HW_FMC_DATAW3S3ML_WR((HW_FMC_DATAW3S3ML_RD() & ~BM_FMC_DATAW3S3ML_DATA) | BF_FMC_DATAW3S3ML_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// HW_FMC_DATAW3S3LM - Cache Data Storage (lowermost word)
//-------------------------------------------------------------------------------------------

#ifndef __LANGUAGE_ASM__
/*!
 * @brief HW_FMC_DATAW3S3LM - Cache Data Storage (lowermost word) (RW)
 *
 * Reset value: 0x00000000U
 *
 * The cache of sixteen 128-bit entries is a 4-way, set-associative cache with 4 sets. The ways are
 * numbered 0-3 and the sets are numbered 0-3. In DATAWxSyUM, DATAWxSyMU, DATAWxSyML, and
 * DATAWxSyLM, x denotes the way, y denotes the set, and the final two letters identify the word: UM
 * (uppermost), MU (mid-upper), ML (mid-lower), and LM (lowermost). This section represents data for
 * the lowermost word (bits [31:0]) of all 4 sets (n=0-3) in way 0.
 */
typedef union _hw_fmc_dataw3s3lm
{
    uint32_t U;
    struct _hw_fmc_dataw3s3lm_bitfields
    {
        uint32_t DATA : 32; //!< [31:0] Bits [31:0] of data entry
    } B;
} hw_fmc_dataw3s3lm_t;
#endif

/*!
 * @name Constants and macros for entire FMC_DATAW3S3LM register
 */
//@{
#define HW_FMC_DATAW3S3LM_ADDR      (REGS_FMC_BASE + 0x2fcU)

#ifndef __LANGUAGE_ASM__
#define HW_FMC_DATAW3S3LM           (*(__IO hw_fmc_dataw3s3lm_t *) HW_FMC_DATAW3S3LM_ADDR)
#define HW_FMC_DATAW3S3LM_RD()      (HW_FMC_DATAW3S3LM.U)
#define HW_FMC_DATAW3S3LM_WR(v)     (HW_FMC_DATAW3S3LM.U = (v))
#define HW_FMC_DATAW3S3LM_SET(v)    (HW_FMC_DATAW3S3LM_WR(HW_FMC_DATAW3S3LM_RD() |  (v)))
#define HW_FMC_DATAW3S3LM_CLR(v)    (HW_FMC_DATAW3S3LM_WR(HW_FMC_DATAW3S3LM_RD() & ~(v)))
#define HW_FMC_DATAW3S3LM_TOG(v)    (HW_FMC_DATAW3S3LM_WR(HW_FMC_DATAW3S3LM_RD() ^  (v)))
#endif
//@}

/*
 * constants & macros for individual FMC_DATAW3S3LM bitfields
 */

/*! @name Register FMC_DATAW3S3LM, field DATA[31:0] (RW)
 */
//@{
#define BP_FMC_DATAW3S3LM_DATA      (0U)      //!< Bit position for FMC_DATAW3S3LM_DATA.
#define BM_FMC_DATAW3S3LM_DATA      (0xffffffffU)  //!< Bit mask for FMC_DATAW3S3LM_DATA.
#define BS_FMC_DATAW3S3LM_DATA      (32U)  //!< Bitfield size in bits for FMC_DATAW3S3LM_DATA.

#ifndef __LANGUAGE_ASM__
//! @brief Read current value of the FMC_DATAW3S3LM_DATA field.
#define BR_FMC_DATAW3S3LM_DATA()   (HW_FMC_DATAW3S3LM.B.DATA)
#endif

//! @brief Format value for bitfield FMC_DATAW3S3LM_DATA.
#define BF_FMC_DATAW3S3LM_DATA(v)   (__REG_VALUE_TYPE((__REG_VALUE_TYPE((v), uint32_t) << BP_FMC_DATAW3S3LM_DATA), uint32_t) & BM_FMC_DATAW3S3LM_DATA)

#ifndef __LANGUAGE_ASM__
//! @brief Set the DATA field to a new value.
#define BW_FMC_DATAW3S3LM_DATA(v)   (HW_FMC_DATAW3S3LM_WR((HW_FMC_DATAW3S3LM_RD() & ~BM_FMC_DATAW3S3LM_DATA) | BF_FMC_DATAW3S3LM_DATA(v)))
#endif
//@}

//-------------------------------------------------------------------------------------------
// hw_fmc_t - module struct
//-------------------------------------------------------------------------------------------
/*!
 * @brief All FMC module registers.
 */
#ifndef __LANGUAGE_ASM__
#pragma pack(1)
typedef struct _hw_fmc
{
    __IO hw_fmc_pfapr_t PFAPR; //!< [0x0] Flash Access Protection Register
    __IO hw_fmc_pfb01cr_t PFB01CR; //!< [0x4] Flash Bank 0-1 Control Register
    __IO hw_fmc_pfb23cr_t PFB23CR; //!< [0x8] Flash Bank 2-3 Control Register
    uint32_t _reserved0[61];
    __IO hw_fmc_tagvdw0sn_t TAGVDW0Sn[4]; //!< [0x100] Cache Tag Storage
    __IO hw_fmc_tagvdw1sn_t TAGVDW1Sn[4]; //!< [0x110] Cache Tag Storage
    __IO hw_fmc_tagvdw2sn_t TAGVDW2Sn[4]; //!< [0x120] Cache Tag Storage
    __IO hw_fmc_tagvdw3sn_t TAGVDW3Sn[4]; //!< [0x130] Cache Tag Storage
    uint32_t _reserved1[48];
    __IO hw_fmc_dataw0s0um_t DATAW0S0UM; //!< [0x200] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw0s0mu_t DATAW0S0MU; //!< [0x204] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw0s0ml_t DATAW0S0ML; //!< [0x208] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw0s0lm_t DATAW0S0LM; //!< [0x20c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw0s1um_t DATAW0S1UM; //!< [0x210] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw0s1mu_t DATAW0S1MU; //!< [0x214] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw0s1ml_t DATAW0S1ML; //!< [0x218] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw0s1lm_t DATAW0S1LM; //!< [0x21c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw0s2um_t DATAW0S2UM; //!< [0x220] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw0s2mu_t DATAW0S2MU; //!< [0x224] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw0s2ml_t DATAW0S2ML; //!< [0x228] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw0s2lm_t DATAW0S2LM; //!< [0x22c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw0s3um_t DATAW0S3UM; //!< [0x230] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw0s3mu_t DATAW0S3MU; //!< [0x234] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw0s3ml_t DATAW0S3ML; //!< [0x238] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw0s3lm_t DATAW0S3LM; //!< [0x23c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw1s0um_t DATAW1S0UM; //!< [0x240] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw1s0mu_t DATAW1S0MU; //!< [0x244] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw1s0ml_t DATAW1S0ML; //!< [0x248] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw1s0lm_t DATAW1S0LM; //!< [0x24c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw1s1um_t DATAW1S1UM; //!< [0x250] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw1s1mu_t DATAW1S1MU; //!< [0x254] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw1s1ml_t DATAW1S1ML; //!< [0x258] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw1s1lm_t DATAW1S1LM; //!< [0x25c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw1s2um_t DATAW1S2UM; //!< [0x260] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw1s2mu_t DATAW1S2MU; //!< [0x264] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw1s2ml_t DATAW1S2ML; //!< [0x268] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw1s2lm_t DATAW1S2LM; //!< [0x26c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw1s3um_t DATAW1S3UM; //!< [0x270] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw1s3mu_t DATAW1S3MU; //!< [0x274] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw1s3ml_t DATAW1S3ML; //!< [0x278] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw1s3lm_t DATAW1S3LM; //!< [0x27c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw2s0um_t DATAW2S0UM; //!< [0x280] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw2s0mu_t DATAW2S0MU; //!< [0x284] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw2s0ml_t DATAW2S0ML; //!< [0x288] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw2s0lm_t DATAW2S0LM; //!< [0x28c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw2s1um_t DATAW2S1UM; //!< [0x290] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw2s1mu_t DATAW2S1MU; //!< [0x294] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw2s1ml_t DATAW2S1ML; //!< [0x298] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw2s1lm_t DATAW2S1LM; //!< [0x29c] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw2s2um_t DATAW2S2UM; //!< [0x2a0] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw2s2mu_t DATAW2S2MU; //!< [0x2a4] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw2s2ml_t DATAW2S2ML; //!< [0x2a8] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw2s2lm_t DATAW2S2LM; //!< [0x2ac] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw2s3um_t DATAW2S3UM; //!< [0x2b0] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw2s3mu_t DATAW2S3MU; //!< [0x2b4] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw2s3ml_t DATAW2S3ML; //!< [0x2b8] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw2s3lm_t DATAW2S3LM; //!< [0x2bc] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw3s0um_t DATAW3S0UM; //!< [0x2c0] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw3s0mu_t DATAW3S0MU; //!< [0x2c4] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw3s0ml_t DATAW3S0ML; //!< [0x2c8] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw3s0lm_t DATAW3S0LM; //!< [0x2cc] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw3s1um_t DATAW3S1UM; //!< [0x2d0] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw3s1mu_t DATAW3S1MU; //!< [0x2d4] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw3s1ml_t DATAW3S1ML; //!< [0x2d8] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw3s1lm_t DATAW3S1LM; //!< [0x2dc] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw3s2um_t DATAW3S2UM; //!< [0x2e0] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw3s2mu_t DATAW3S2MU; //!< [0x2e4] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw3s2ml_t DATAW3S2ML; //!< [0x2e8] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw3s2lm_t DATAW3S2LM; //!< [0x2ec] Cache Data Storage (lowermost word)
    __IO hw_fmc_dataw3s3um_t DATAW3S3UM; //!< [0x2f0] Cache Data Storage (uppermost word)
    __IO hw_fmc_dataw3s3mu_t DATAW3S3MU; //!< [0x2f4] Cache Data Storage (mid-upper word)
    __IO hw_fmc_dataw3s3ml_t DATAW3S3ML; //!< [0x2f8] Cache Data Storage (mid-lower word)
    __IO hw_fmc_dataw3s3lm_t DATAW3S3LM; //!< [0x2fc] Cache Data Storage (lowermost word)
} hw_fmc_t;
#pragma pack()

//! @brief Macro to access all FMC registers.
//! @return Reference (not a pointer) to the registers struct. To get a pointer to the struct,
//!     use the '&' operator, like <code>&HW_FMC</code>.
#define HW_FMC     (*(hw_fmc_t *) REGS_FMC_BASE)
#endif

#endif // __HW_FMC_REGISTERS_H__
// v22/130417/1.2.6
// EOF
